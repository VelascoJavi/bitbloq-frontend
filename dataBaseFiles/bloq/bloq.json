[
  {
    "type": "statement",
    "name": "botbloqHexapodLateralDisplacement",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-hexapod-lateraldisplacement",
    "content": [
      [
        {
          "alias": "text",
          "value": "lateraldisplacement-moveto"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right",
              "value": "RIGHT"
            },
            {
              "label": "left",
              "value": "LEFT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 3
        },
        {
          "alias": "text",
          "value": "steps"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHexapod"
      ],
      "needInstanceOf": [
        {
          "name": "hexapod",
          "type": "BotbloqHexapod"
        }
      ],
      "codeLines": [
        {
          "code": "hexapod.lateralDisplacement(\"{SIDE}\", {STEPS})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHexapodMove",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-hexapod-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "forward",
              "value": "FORWARD"
            },
            {
              "label": "backward",
              "value": "BACKWARD"
            },
            {
              "label": "turn-right",
              "value": "TURN_RIGHT"
            },
            {
              "label": "turn-left",
              "value": "TURN_LEFT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 3
        },
        {
          "alias": "text",
          "value": "steps"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHexapod"
      ],
      "needInstanceOf": [
        {
          "name": "hexapod",
          "type": "BotbloqHexapod"
        }
      ],
      "codeLines": [
        {
          "code": "hexapod.move(\"{MOVEMENT}\", {STEPS})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHexapodStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-hexapod-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "stop"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHexapod"
      ],
      "needInstanceOf": [
        {
          "name": "hexapod",
          "type": "BotbloqHexapod"
        }
      ],
      "codeLines": [
        {
          "code": "hexapod.stop()"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHumanBendDown",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-human-benddown",
    "content": [
      [
        {
          "alias": "text",
          "value": "benddown"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHuman"
      ],
      "needInstanceOf": [
        {
          "name": "human",
          "type": "BotbloqHuman"
        }
      ],
      "codeLines": [
        {
          "code": "human.benddown()"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHumanLateralDisplacement",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-human-lateraldisplacement",
    "content": [
      [
        {
          "alias": "text",
          "value": "lateraldisplacement-moveto"
        },
        {
          "id": "FOOT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right",
              "value": "RIGHT"
            },
            {
              "label": "left",
              "value": "LEFT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 3
        },
        {
          "alias": "text",
          "value": "steps"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHuman"
      ],
      "needInstanceOf": [
        {
          "name": "human",
          "type": "BotbloqHuman"
        }
      ],
      "codeLines": [
        {
          "code": "human.lateralDisplacement(\"{FOOT}\", {STEPS})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHumanMove",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-human-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "forward",
              "value": "FORWARD"
            },
            {
              "label": "backward",
              "value": "BACKWARD"
            },
            {
              "label": "turn-right",
              "value": "TURN_RIGHT"
            },
            {
              "label": "turn-left",
              "value": "TURN_LEFT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 3
        },
        {
          "alias": "text",
          "value": "steps"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHuman"
      ],
      "needInstanceOf": [
        {
          "name": "human",
          "type": "BotbloqHuman"
        }
      ],
      "codeLines": [
        {
          "code": "human.move(\"{MOVEMENT}\", {STEPS})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHumanRotateByFoot",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-human-rotatefoot",
    "content": [
      [
        {
          "alias": "text",
          "value": "rotate"
        },
        {
          "id": "DEGREES",
          "alias": "numberInput",
          "value": 45
        },
        {
          "alias": "text",
          "value": "rotate-grades-foot"
        },
        {
          "id": "FOOT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right",
              "value": "RIGHT"
            },
            {
              "label": "left",
              "value": "LEFT"
            }
          ]
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHuman"
      ],
      "needInstanceOf": [
        {
          "name": "human",
          "type": "BotbloqHuman"
        }
      ],
      "codeLines": [
        {
          "code": "human.rotateByFoot({DEGREES},\"{FOOT}\")"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHumanStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-human-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "stop"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHuman"
      ],
      "needInstanceOf": [
        {
          "name": "human",
          "type": "BotbloqHuman"
        }
      ],
      "codeLines": [
        {
          "code": "human.stop()"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqHumanUpstairs",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-human-upstairs",
    "content": [
      [
        {
          "alias": "text",
          "value": "upstairs"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqHuman"
      ],
      "needInstanceOf": [
        {
          "name": "human",
          "type": "BotbloqHuman"
        }
      ],
      "codeLines": [
        {
          "code": "human.upstairs()"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "botbloqManipulatorCanMoveAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0cec05b5-80c6-415b-ac10-c3c223e7366a"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0644eb94-5615-4cc9-8d98-f81ba697a8da"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "aa195d89-6f45-466c-927d-2621bf37d3fd"
      }
    ],
    "bloqClass": "bloq-botbloq-manipulator-canmove",
    "content": [
      [
        {
          "alias": "text",
          "value": "can-move-to"
        },
        {
          "alias": "text",
          "value": "x:"
        },
        {
          "bloqInputId": "X",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "0cec05b5-80c6-415b-ac10-c3c223e7366a"
        },
        {
          "alias": "text",
          "value": "y:"
        },
        {
          "bloqInputId": "Y",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "0644eb94-5615-4cc9-8d98-f81ba697a8da"
        },
        {
          "alias": "text",
          "value": "z:"
        },
        {
          "bloqInputId": "Z",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "aa195d89-6f45-466c-927d-2621bf37d3fd"
        },
        {
          "alias": "text",
          "value": "?"
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "python": {
      "libraries": [
        "BotbloqManipulator"
      ],
      "needInstanceOf": [
        {
          "name": "manipulator",
          "type": "BotbloqManipulator"
        }
      ],
      "codeLines": [
        {
          "code": "vehicle.canMove({X}, {Y}, {Z})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqManipulatorMoveOnSpaceAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "935b34db-203d-4f7e-b5b4-985ede33d190"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "981ec180-1e93-4865-8a58-6f788f93d364"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "3d73512c-9e7e-450e-90c5-fc361ca63208"
      }
    ],
    "bloqClass": "bloq-botbloq-manipulator-moveonspace",
    "content": [
      [
        {
          "alias": "text",
          "value": "move-to"
        },
        {
          "alias": "text",
          "value": "x:"
        },
        {
          "bloqInputId": "X",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "935b34db-203d-4f7e-b5b4-985ede33d190"
        },
        {
          "alias": "text",
          "value": "y:"
        },
        {
          "bloqInputId": "Y",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "981ec180-1e93-4865-8a58-6f788f93d364"
        },
        {
          "alias": "text",
          "value": "z:"
        },
        {
          "bloqInputId": "Z",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "3d73512c-9e7e-450e-90c5-fc361ca63208"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqManipulator"
      ],
      "needInstanceOf": [
        {
          "name": "manipulator",
          "type": "BotbloqManipulator"
        }
      ],
      "codeLines": [
        {
          "code": "manipulator.move({X}, {Y}, {Z})"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "botbloqManipulatorCanMove",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-botbloq-manipulator-canmove",
    "content": [
      [
        {
          "alias": "text",
          "value": "can-move-to"
        },
        {
          "alias": "text",
          "value": "x:"
        },
        {
          "id": "X",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "y:"
        },
        {
          "id": "Y",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "z:"
        },
        {
          "id": "Z",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "?"
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "python": {
      "libraries": [
        "BotbloqManipulator"
      ],
      "needInstanceOf": [
        {
          "name": "manipulator",
          "type": "BotbloqManipulator"
        }
      ],
      "codeLines": [
        {
          "code": "vehicle.canMove({X}, {Y}, {Z})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqManipulatorMoveOnSpace",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-manipulator-moveonspace",
    "content": [
      [
        {
          "alias": "text",
          "value": "move-to"
        },
        {
          "alias": "text",
          "value": "x:"
        },
        {
          "id": "X",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "y:"
        },
        {
          "id": "Y",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "z:"
        },
        {
          "id": "Z",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqManipulator"
      ],
      "needInstanceOf": [
        {
          "name": "manipulator",
          "type": "BotbloqManipulator"
        }
      ],
      "codeLines": [
        {
          "code": "manipulator.move({X}, {Y}, {Z})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqManipulatorMoveClamp",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-manipulator-moveclamp",
    "content": [
      [
        {
          "id": "ACTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "open",
              "value": true
            },
            {
              "label": "close",
              "value": false
            }
          ]
        },
        {
          "alias": "text",
          "value": "the-clamp"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqManipulator"
      ],
      "needInstanceOf": [
        {
          "name": "manipulator",
          "type": "BotbloqManipulator"
        }
      ],
      "codeLines": [
        {
          "code": "manipulator.moveClamp({ACTION})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqManipulatorRotateJoints",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-manipulator-rotatejoints",
    "content": [
      [
        {
          "alias": "text",
          "value": "move-joint"
        },
        {
          "id": "JOINT_NUMBER",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "1",
              "value": "1"
            },
            {
              "label": "2",
              "value": "2"
            },
            {
              "label": "3",
              "value": "3"
            }
          ]
        },
        {
          "id": "DEGREES",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "degrees"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqManipulator"
      ],
      "needInstanceOf": [
        {
          "name": "manipulator",
          "type": "BotbloqManipulator"
        }
      ],
      "codeLines": [
        {
          "code": "manipulator.moveJoint({JOINT_NUMBER}, {DEGREES})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqSnakeLateralDisplacement",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-snake-lateraldisplacement",
    "content": [
      [
        {
          "alias": "text",
          "value": "lateraldisplacement-moveto"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right",
              "value": "RIGHT"
            },
            {
              "label": "left",
              "value": "LEFT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "move-for"
        },
        {
          "id": "DELAY",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "ms"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqSnake"
      ],
      "needInstanceOf": [
        {
          "name": "snake",
          "type": "BotbloqSnake"
        }
      ],
      "codeLines": [
        {
          "code": "snake.lateralDisplacement(\"{SIDE}\", {DELAY})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqSnakeMove",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-snake-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "forward.",
              "value": "FORWARD"
            },
            {
              "label": "backward.",
              "value": "BACKWARD"
            }
          ]
        },
        {
          "alias": "text",
          "value": "move-for"
        },
        {
          "id": "DELAY",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "ms"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqSnake"
      ],
      "needInstanceOf": [
        {
          "name": "snake",
          "type": "BotbloqSnake"
        }
      ],
      "codeLines": [
        {
          "code": "snake.move(\"{MOVEMENT}\", {DELAY})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqSnakeRoll",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-snake-roll",
    "content": [
      [
        {
          "alias": "text",
          "value": "roll-to"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right",
              "value": "RIGHT"
            },
            {
              "label": "left",
              "value": "LEFT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "move-for"
        },
        {
          "id": "DELAY",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "ms"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqSnake"
      ],
      "needInstanceOf": [
        {
          "name": "snake",
          "type": "BotbloqSnake"
        }
      ],
      "codeLines": [
        {
          "code": "snake.roll(\"{SIDE}\", {DELAY})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqSnakeRotate",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-snake-rotate",
    "content": [
      [
        {
          "alias": "text",
          "value": "roll-to"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right",
              "value": "RIGHT"
            },
            {
              "label": "left",
              "value": "LEFT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "move-for"
        },
        {
          "id": "DELAY",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "ms"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqSnake"
      ],
      "needInstanceOf": [
        {
          "name": "snake",
          "type": "BotbloqSnake"
        }
      ],
      "codeLines": [
        {
          "code": "snake.rotate(\"{SIDE}\", {DELAY})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqSnakeStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-snake-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "stop"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqSnake"
      ],
      "needInstanceOf": [
        {
          "name": "snake",
          "type": "BotbloqSnake"
        }
      ],
      "codeLines": [
        {
          "code": "snake.stop()"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "botbloqVehicleIRSensor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-botbloq-vehicle-ir",
    "content": [
      [
        {
          "alias": "text",
          "value": "read-sensor"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right",
              "value": "RIGHT"
            },
            {
              "label": "left",
              "value": "LEFT"
            }
          ]
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "int"
    },
    "python": {
      "libraries": [
        "BotbloqVehicle"
      ],
      "needInstanceOf": [
        {
          "name": "vehicle",
          "type": "BotbloqVehicle"
        }
      ],
      "codeLines": [
        {
          "code": "vehicle.readIRSensor(\"{SIDE}\")"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqVehicleMove",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-vehicle-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "forward",
              "value": "FORWARD"
            },
            {
              "label": "backward",
              "value": "BACKWARD"
            },
            {
              "label": "turn-right",
              "value": "TURN_RIGHT"
            },
            {
              "label": "turn-left",
              "value": "TURN_LEFT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "move-for"
        },
        {
          "id": "DELAY",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "ms-at-speed-of"
        },
        {
          "id": "SPEED",
          "alias": "numberInput",
          "value": 5
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqVehicle"
      ],
      "needInstanceOf": [
        {
          "name": "vehicle",
          "type": "BotbloqVehicle"
        }
      ],
      "codeLines": [
        {
          "code": "vehicle.move(\"{DELAY}\",\"{SPEED}\",\"{MOVEMENT}\")"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "botbloqVehicleStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-botbloq-vehicle-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "stop"
        }
      ]
    ],
    "code": "",
    "python": {
      "libraries": [
        "BotbloqVehicle"
      ],
      "needInstanceOf": [
        {
          "name": "vehicle",
          "type": "BotbloqVehicle"
        }
      ],
      "codeLines": [
        {
          "code": "vehicle.stop()"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "arrayClassVariable",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-array-class-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-array-class-variable-variable"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "["
        },
        {
          "id": "POSITION",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "]"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        }
      ]
    ],
    "code": "{CLASS}.{VAR}[{POSITION}]",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "VAR",
      "pointer": "true",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "{CLASS}.{VAR}[{POSITION}]"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"arrayClassVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "classChildren",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-class-children",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-class"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "placeholder": "bloq-name-default"
        },
        {
          "alias": "text",
          "value": "bloq-class-inheritance-type"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-class-inheritance-public",
              "value": "public"
            },
            {
              "label": "bloq-class-inheritance-protected",
              "value": "protected"
            },
            {
              "label": "bloq-class-inheritance-private",
              "value": "private"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-class-from"
        },
        {
          "id": "PARENT",
          "alias": "dynamicDropdown",
          "options": "classes"
        }
      ]
    ],
    "createDynamicContent": "classes",
    "code": "class {NAME} : public {PARENT}{{STATEMENTS}};",
    "returnType": {
      "type": "simple",
      "value": "class"
    },
    "arduino": {
      "code": "class {NAME} : public {PARENT}{{STATEMENTS}};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"classChildren\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "constructorClassArguments",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "c288421a-c3ea-4aef-8b1b-9d0d45e9b592"
      }
    ],
    "bloqClass": "bloq-constructor-arguments",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-constructor-arguments"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "argument",
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "c288421a-c3ea-4aef-8b1b-9d0d45e9b592"
        }
      ]
    ],
    "code": "{CLASS-OUTSIDE} ({ARGS}){{STATEMENTS}};",
    "arduino": {
      "code": "{CLASS-OUTSIDE} ({ARGS}){{STATEMENTS}};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"constructorClassArguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "invokeArgumentsClass",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "1855f4d5-e613-4c6f-8c04-88b348fb305f"
      }
    ],
    "bloqClass": "bloq-invoke-arguments-class",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-arguments-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "classes"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-arguments-class-name"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "placeholder": "bloq-name-default"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-arguments-args"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "1855f4d5-e613-4c6f-8c04-88b348fb305f"
        }
      ]
    ],
    "createDynamicContent": "objects",
    "code": "{CLASS} {NAME}({ARGS});",
    "returnType": {
      "type": "simple",
      "value": "var"
    },
    "arduino": {
      "code": "{CLASS} {NAME}({ARGS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeArgumentsClass\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "invokeClassFunctionWithArguments",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "9fe45d66-0f39-46f7-be1e-b52ad480b90b"
      }
    ],
    "bloqClass": "bloq-invoke-class-function-args",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "voidFunctions"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-args"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "9fe45d66-0f39-46f7-be1e-b52ad480b90b"
        }
      ]
    ],
    "code": "{CLASS}.{FUNCTION}({ARGS});",
    "dynamicDropdown": {
      "idDropdown": "FUNCTION",
      "options": "voidFunctions"
    },
    "arduino": {
      "code": "{CLASS}.{FUNCTION}({ARGS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeClassFunctionWithArguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "invokeClassReturnFunctionWithArguments",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "4edc8305-59b2-475d-a352-06ed0abf75ba"
      }
    ],
    "bloqClass": "bloq-invoke-class-return-function",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-class-return-function-args-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "returnFunctions"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-return-function-args-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-return-function-args-args"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "4edc8305-59b2-475d-a352-06ed0abf75ba"
        }
      ]
    ],
    "code": "{CLASS}.{FUNCTION}({ARGS});",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "FUNCTION",
      "options": "returnFunctions"
    },
    "arduino": {
      "code": "{CLASS}.{FUNCTION}({ARGS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeClassReturnFunctionWithArguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "private",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-private",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-private"
        }
      ]
    ],
    "code": "private : {STATEMENTS}",
    "arduino": {
      "code": "private : {STATEMENTS}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"private\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "protected",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-protected",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-protected"
        }
      ]
    ],
    "code": "protected : {STATEMENTS}",
    "arduino": {
      "code": "protected : {STATEMENTS}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"protected\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "public",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-public",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-public"
        }
      ]
    ],
    "code": "public : {STATEMENTS}",
    "arduino": {
      "code": "public : {STATEMENTS}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"public\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "setClassArrayVariable",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "pointer": "true",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "dd25a5fb-9a6e-4649-83cf-6c85213dfecf"
      }
    ],
    "bloqClass": "bloq-set-class-variableArray",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-set-class-variableArray-variable"
        },
        {
          "id": "NAME",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "["
        },
        {
          "id": "ITERATOR",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "]"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        },
        {
          "alias": "text",
          "value": "="
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": {
            "type": "fromDynamicDropdown",
            "idDropdown": "NAME",
            "pointer": "true",
            "options": "softwareVars"
          },
          "suggestedBloqs": [
            "number",
            "basicOperations",
            "string",
            "stringSum"
          ],
          "name": "dd25a5fb-9a6e-4649-83cf-6c85213dfecf"
        }
      ]
    ],
    "code": "{CLASS}.{NAME}[{ITERATOR}] = {VALUE};",
    "arduino": {
      "code": "{CLASS}.{NAME}[{ITERATOR}] = {VALUE};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"setClassArrayVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "class",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-class",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-class"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "placeholder": "bloq-name-default"
        }
      ]
    ],
    "createDynamicContent": "classes",
    "code": "class {NAME}{{STATEMENTS}};",
    "returnType": {
      "type": "simple",
      "value": "class"
    },
    "arduino": {
      "code": "class {NAME}{{STATEMENTS}};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"class\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "constructorClass",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-constructor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-constructor"
        }
      ]
    ],
    "code": "{CLASS-OUTSIDE}(){{STATEMENTS}};",
    "arduino": {
      "code": "\n${CLASS-OUTSIDE}(){{STATEMENTS}};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"constructorClass\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "invokeClass",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-invoke-class",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "classes"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-name"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "value": ""
        }
      ]
    ],
    "createDynamicContent": "objects",
    "code": "{CLASS} {NAME};",
    "returnType": {
      "type": "simple",
      "value": "var"
    },
    "arduino": {
      "code": "{CLASS} {NAME};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeClass\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "invokeClassFunction",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-invoke-class-function",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "voidFunctions"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        }
      ]
    ],
    "code": "{CLASS}.{FUNCTION}();",
    "dynamicDropdown": {
      "idDropdown": "FUNCTION",
      "options": "voidFunctions"
    },
    "arduino": {
      "code": "{CLASS}.{FUNCTION}();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeClassFunction\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "invokeClassReturnFunction",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-invoke-class-return-function",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-class-return-function-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "returnFunctions"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        }
      ]
    ],
    "code": "{CLASS}.{FUNCTION}()",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "FUNCTION",
      "options": "returnFunctions"
    },
    "arduino": {
      "code": "{CLASS}.{FUNCTION}()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeClassReturnFunction\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "selectClassVariable",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-select-class-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-select-class-variable-variable"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        }
      ]
    ],
    "code": "{CLASS}.{VAR}",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "VAR",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "{CLASS}.{VAR}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"selectClassVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "setClassVariable",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "d86958b7-6330-4915-8750-314664626f34"
      }
    ],
    "bloqClass": "bloq-set-class-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-set-class-variable-variable"
        },
        {
          "id": "NAME",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-class-function-class"
        },
        {
          "id": "CLASS",
          "alias": "dynamicDropdown",
          "options": "objects"
        },
        {
          "alias": "text",
          "value": "="
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": {
            "type": "fromDynamicDropdown",
            "idDropdown": "NAME",
            "options": "softwareVars"
          },
          "suggestedBloqs": [
            "number",
            "basicOperations",
            "string",
            "stringSum"
          ],
          "name": "d86958b7-6330-4915-8750-314664626f34"
        }
      ]
    ],
    "code": "{CLASS}.{NAME} = {VALUE};",
    "arduino": {
      "code": "{CLASS}.{NAME} = {VALUE};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"setClassVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "code",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-code",
    "content": [
      [
        {
          "id": "CODE",
          "alias": "multilineCodeInput",
          "value": "",
          "placeholder": "bloq-code-writeYourCode"
        }
      ]
    ],
    "code": "{CODE}\n",
    "arduino": {
      "code": "{CODE}\n"
    },
    "python": {
      "codeLines": [
        {
          "code": "{CODE}"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "comment",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-comment",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-comment-comment"
        },
        {
          "id": "COMMENT",
          "alias": "multilineCommentInput",
          "placeholder": "bloq-comment-default"
        }
      ]
    ],
    "code": "/*\n{COMMENT}\n*/",
    "arduino": {
      "code": "/*\n{COMMENT}\n*/"
    },
    "python": {
      "codeLines": [
        {
          "code": "\"\"\"{COMMENT}\"\"\""
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "enableInterrupt",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-enable-interrupt",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-enable-interrupt"
        },
        {
          "id": "FUNC",
          "alias": "dynamicDropdown",
          "options": "voidFunctions"
        },
        {
          "alias": "text",
          "value": "bloq-enable-interrupt-pin"
        },
        {
          "id": "PIN",
          "alias": "dynamicDropdown",
          "options": "varComponents"
        },
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-enable-interrupt-rising",
              "value": "RISING"
            },
            {
              "label": "bloq-enable-interrupt-falling",
              "value": "FALLING"
            },
            {
              "label": "bloq-enable-interrupt-change",
              "value": "CHANGE"
            }
          ]
        }
      ]
    ],
    "code": "enableInterrupt({PIN}, {FUNC}, {STATE});",
    "arduino": {
      "code": "enableInterrupt({PIN}, {FUNC}, {STATE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"enableInterrupt\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "convert",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "int",
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "c1175794-1f15-43d6-b34b-334080381938"
      }
    ],
    "bloqClass": "bloq-convert",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-convert-convert"
        },
        {
          "bloqInputId": "NUMBER",
          "alias": "bloqInput",
          "acceptType": [
            "int",
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "c1175794-1f15-43d6-b34b-334080381938"
        },
        {
          "alias": "text",
          "value": "bloq-convert-to"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-convert-dec",
              "value": "DEC"
            },
            {
              "label": "bloq-convert-hex",
              "value": "HEX"
            },
            {
              "label": "bloq-convert-oct",
              "value": "OCT"
            },
            {
              "label": "bloq-convert-bin",
              "value": "BIN"
            }
          ]
        }
      ]
    ],
    "code": "({NUMBER},{TYPE});",
    "arduino": {
      "code": "({NUMBER},{TYPE})"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"convert\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "serialSend",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "82ff2937-90c5-47e9-a7a4-eb17f27ee219"
      }
    ],
    "bloqClass": "bloq-serial-send",
    "content": [
      [
        {
          "id": "SERIAL",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "bloq-serial-send-send"
        },
        {
          "bloqInputId": "DATA",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "82ff2937-90c5-47e9-a7a4-eb17f27ee219"
        },
        {
          "id": "FUNCTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-serial-send-println",
              "value": "println"
            },
            {
              "label": "bloq-serial-send-print",
              "value": "print"
            }
          ]
        }
      ]
    ],
    "code": "{SERIAL}.{FUNCTION}({DATA});",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "code": "{SERIAL}.{FUNCTION}({DATA});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"serialSend\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "serialReceive",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-serial-receiver",
    "content": [
      [
        {
          "id": "SERIAL",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "bloq-serial-receiver-receive"
        }
      ]
    ],
    "code": "{SERIAL}.readString()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{SERIAL}.begin(º[{SERIAL}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{SERIAL}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{SERIAL}.pin.rx]",
            "º[{SERIAL}.pin.tx]",
            "º[{SERIAL}.baudRate]"
          ]
        }
      ],
      "code": "{SERIAL}.readString()"
    },
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"serialReceive\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "serialReceiveInt",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-serial-receive-number",
    "content": [
      [
        {
          "id": "SERIAL",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "bloq-serial-receiver-receive-number"
        }
      ]
    ],
    "code": "{SERIAL}.readInt()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{SERIAL}.begin(º[{SERIAL}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{SERIAL}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{SERIAL}.pin.rx]",
            "º[{SERIAL}.pin.tx]",
            "º[{SERIAL}.baudRate]"
          ]
        }
      ],
      "code": "{SERIAL}.readInt()"
    },
    "returnType": {
      "type": "simple",
      "value": "int"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"serialReceiveInt\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "serialSend-v1",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "number",
          "selectVariable"
        ],
        "name": "215d7c8c-8569-45f5-9543-7695a76879b8"
      }
    ],
    "bloqClass": "bloq-serial-send",
    "content": [
      [
        {
          "id": "SERIAL",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "bloq-serial-send-send"
        },
        {
          "bloqInputId": "DATA",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "number",
            "selectVariable"
          ],
          "name": "215d7c8c-8569-45f5-9543-7695a76879b8"
        },
        {
          "id": "LN",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-serial-send-println",
              "value": "println"
            },
            {
              "label": "bloq-serial-send-print",
              "value": "print"
            }
          ]
        }
      ]
    ],
    "code": "{SERIAL}.{LN}({DATA});",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{SERIAL}.begin(º[{SERIAL}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{SERIAL}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{SERIAL}.pin.rx]",
            "º[{SERIAL}.pin.tx]",
            "º[{SERIAL}.baudRate]"
          ]
        }
      ],
      "code": "{SERIAL}.{LN}({DATA});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"serialSend-v1\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "viewer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-viewer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-viewer"
        }
      ]
    ],
    "code": "/*sendViewerData*/",
    "arduino": {
      "code": "/*sendViewerData*/"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"viewer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "PTSensor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-PTsensor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-PTsensor"
        },
        {
          "id": "FUNCTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-PTsensor-pressure",
              "value": "getPressure()"
            },
            {
              "label": "bloq-PTsensor-temperature",
              "value": "getTemperature()"
            },
            {
              "label": "bloq-PTsensor-altitude",
              "value": "getAltitude()"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-PTsensor-sensor"
        },
        {
          "id": "PTSENS",
          "alias": "dynamicDropdown",
          "options": "barometer"
        }
      ]
    ],
    "code": "{PTSENS}.{FUNCTION}",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "{PTSENS}.{FUNCTION}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"PTSensor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "rgbLed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-rgbLed",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "rgbs"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-red"
        },
        {
          "id": "RED",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-green"
        },
        {
          "id": "GREEN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-blue"
        },
        {
          "id": "BLUE",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "{LED}.setRGBcolor({RED},{GREEN},{BLUE});",
    "arduino": {
      "conditional": {
        "hardwareProperty": "codeType",
        "hardwareAliasId": "LED",
        "code": {
          "neopixel": "{LED}.setPixelColor(0, {LED}.Color({RED},{GREEN},{BLUE}));\n{LED}.show();",
          "": "{LED}.setRGBcolor({RED},{GREEN},{BLUE});"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"rgbLed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "rgbLedFade",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-rgbLed-fade",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed-fade"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "rgbs"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-fade-red"
        },
        {
          "id": "RED",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-fade-green"
        },
        {
          "id": "GREEN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-fade-blue"
        },
        {
          "id": "BLUE",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "arduino": {
      "conditional": {
        "hardwareProperty": "codeType",
        "hardwareAliasId": "LED",
        "code": {
          "neopixel": "{LED}.setPixelColor(0, {LED}.Color({RED},{GREEN},{BLUE}));\n{LED}.show();",
          "": "{LED}.crossFade({RED},{GREEN},{BLUE});"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"rgbLedFade\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "rgbLedOff",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-rgbLed-off",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed-off"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "rgbs"
        }
      ]
    ],
    "arduino": {
      "conditional": {
        "hardwareProperty": "codeType",
        "hardwareAliasId": "LED",
        "code": {
          "neopixel": "{LED}.setPixelColor(0, {LED}.Color(0, 0, 0));\n{LED}.show();",
          "": "{LED}.setRGBcolor(0,0,0);"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"rgbLedOff\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "rgbLedSimple",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-rgbLed-simple",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed-simple"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "rgbs"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-simple-color"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-rgbLed-simple-white",
              "value": "255,255,255"
            },
            {
              "label": "bloq-rgbLed-simple-yellow",
              "value": "255,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-orange",
              "value": "200,50,0"
            },
            {
              "label": "bloq-rgbLed-simple-red",
              "value": "255,0,0"
            },
            {
              "label": "bloq-rgbLed-simple-green",
              "value": "0,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-dark-green",
              "value": "0,60,102"
            },
            {
              "label": "bloq-rgbLed-simple-blue",
              "value": "40,40,255"
            },
            {
              "label": "bloq-rgbLed-simple-dark-blue",
              "value": "0,0,255"
            },
            {
              "label": "bloq-rgbLed-simple-pink",
              "value": "255,0,255"
            }
          ]
        }
      ]
    ],
    "arduino": {
      "conditional": {
        "hardwareProperty": "codeType",
        "hardwareAliasId": "LED",
        "code": {
          "neopixel": "{LED}.setPixelColor(0, {LED}.Color({COLOR}));\n{LED}.show();",
          "": "{LED}.setRGBcolor({COLOR});"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"rgbLedSimple\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "PTSensorCalibration",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-PTsensor-calibration",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-PTsensor-calibration"
        },
        {
          "id": "VALUE",
          "alias": "numberInput",
          "value": 101325
        },
        {
          "alias": "text",
          "value": "bloq-PTsensor-calibration-sensor"
        },
        {
          "id": "PTSENS",
          "alias": "dynamicDropdown",
          "options": "barometer"
        }
      ]
    ],
    "code": "{PTSENS}.setSealevelPressure({VALUE});",
    "arduino": {
      "code": "{PTSENS}.setSealevelPressure({VALUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"PTSensorCalibration\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "rgbLedAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "aa6ef1ad-ab64-48b6-8e3a-1ca4be425189"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "bfbad961-debe-491a-8d46-5fc2610b7748"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b45b59ea-8768-41da-b98f-091a1b2a0795"
      }
    ],
    "bloqClass": "bloq-rgbLed-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "rgbs"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-red"
        },
        {
          "bloqInputId": "RED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "aa6ef1ad-ab64-48b6-8e3a-1ca4be425189"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-green"
        },
        {
          "bloqInputId": "GREEN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "bfbad961-debe-491a-8d46-5fc2610b7748"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-blue"
        },
        {
          "bloqInputId": "BLUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b45b59ea-8768-41da-b98f-091a1b2a0795"
        }
      ]
    ],
    "arduino": {
      "conditional": {
        "hardwareProperty": "codeType",
        "hardwareAliasId": "LED",
        "code": {
          "neopixel": "{LED}.setPixelColor(0, {LED}.Color({RED},{GREEN},{BLUE}));\n{LED}.show();",
          "": "{LED}.setRGBcolor({RED},{GREEN},{BLUE});"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"rgbLedAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "analogReadAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "9c7a4b44-9144-4a9e-91b1-1e83163e11bd"
      }
    ],
    "bloqClass": "bloq-analog-read-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-analog-read-advanced-readpin"
        },
        {
          "bloqInputId": "PIN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "selectVariable"
          ],
          "name": "9c7a4b44-9144-4a9e-91b1-1e83163e11bd"
        }
      ]
    ],
    "code": "'{PIN}'.indexOf('A') !== -1 ? 'analogRead({PIN})'.replace(/\"/g, '') : 'analogRead({PIN})'",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "analogRead(¬{PIN.formatPin})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"analogReadAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "analogWrite",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "10516a52-176e-4033-84bd-afb2ee1f003b"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "pinLevels",
          "number",
          "selectVariable"
        ],
        "name": "4d0b001c-24c4-426f-a8c1-b929b7622f59"
      }
    ],
    "bloqClass": "bloq-pin-writte-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-pin-analog-write-V1"
        },
        {
          "bloqInputId": "PIN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "10516a52-176e-4033-84bd-afb2ee1f003b"
        },
        {
          "alias": "text",
          "value": "bloq-pin-analog-write-data-V1"
        },
        {
          "bloqInputId": "DATA",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "pinLevels",
            "number",
            "selectVariable"
          ],
          "name": "4d0b001c-24c4-426f-a8c1-b929b7622f59"
        }
      ]
    ],
    "code": "'{PIN}'.indexOf('A') !== -1 ? 'analogWrite({PIN},{DATA});'.replace(/\"/g, '') : 'analogWrite({PIN},{DATA});'",
    "arduino": {
      "code": "analogWrite(¬{PIN.formatPin}, {DATA});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"analogWrite\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "buzzerAdvanced-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "39fa6232-3661-4201-8e17-ada3fb399ab1"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "21d88dda-835a-4ade-8259-892c0ef493d6"
      }
    ],
    "bloqClass": "bloq-buzzer-advance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-sound"
        },
        {
          "id": "BUZZER",
          "alias": "dynamicDropdown",
          "options": "buzzers"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-note"
        },
        {
          "bloqInputId": "NOTE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "39fa6232-3661-4201-8e17-ada3fb399ab1"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-for"
        },
        {
          "bloqInputId": "SECONDS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "21d88dda-835a-4ade-8259-892c0ef493d6"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-ms"
        }
      ]
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
    "arduino": {
      "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"buzzerAdvanced-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "buzzerWithoutPause",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-buzzer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-sound"
        },
        {
          "id": "BUZZER",
          "alias": "dynamicDropdown",
          "options": "buzzers"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-note"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-ms"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-without-pause"
        }
      ]
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});",
    "arduino": {
      "needInstanceOf": [
        {
          "name": "{BUZZER}",
          "type": "const int",
          "equals": "º[{BUZZER}.pin.s]"
        }
      ],
      "code": "tone({BUZZER},{NOTE},{SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"buzzerWithoutPause\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "buzzerWithoutPauseAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "ec0b79a0-8f83-4991-bd4d-b34aff0ace56"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b86eec5a-1175-40b7-89ec-39146ba1f6e3"
      }
    ],
    "bloqClass": "bloq-buzzer-advance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-sound"
        },
        {
          "id": "BUZZER",
          "alias": "dynamicDropdown",
          "options": "buzzers"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-note"
        },
        {
          "bloqInputId": "NOTE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "ec0b79a0-8f83-4991-bd4d-b34aff0ace56"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-for"
        },
        {
          "bloqInputId": "SECONDS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b86eec5a-1175-40b7-89ec-39146ba1f6e3"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-ms"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-without-pause"
        }
      ]
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});",
    "arduino": {
      "code": "tone({BUZZER},{NOTE},{SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"buzzerWithoutPauseAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "continuousServoStartAdvanced-v1",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "3e024d35-b131-41f2-bcc2-67c3c7350ae5"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "4bf7324a-b9eb-40c2-a56d-a0807d61dfd2"
      }
    ],
    "bloqClass": "bloq-continuous-servo-start-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-continuous-servo-start-advanced-turn"
        },
        {
          "bloqInputId": "SERVO",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "3e024d35-b131-41f2-bcc2-67c3c7350ae5"
        },
        {
          "alias": "text",
          "value": "bloq-continuous-servo-start-advanced-direction"
        },
        {
          "bloqInputId": "DIRECTION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "4bf7324a-b9eb-40c2-a56d-a0807d61dfd2"
        }
      ]
    ],
    "code": "{SERVO}.write({DIRECTION});",
    "arduino": {
      "code": "{SERVO}.write({DIRECTION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"continuousServoStartAdvanced-v1\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "continuousServoStopAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "feef3c5d-b03d-4af1-a2b3-671c0599113f"
      }
    ],
    "bloqClass": "bloq-continuous-servo-stop-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-continuous-servo-stop-advanced-stop"
        },
        {
          "bloqInputId": "SERVO",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "feef3c5d-b03d-4af1-a2b3-671c0599113f"
        }
      ]
    ],
    "code": "{SERVO}.write(90);",
    "arduino": {
      "code": "{SERVO}.write(90);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"continuousServoStopAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "digitalReadAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "75eed2c6-1bd4-44af-8f19-e744df2e4024"
      }
    ],
    "bloqClass": "bloq-digital-read-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-digital-read-advanced-readpin"
        },
        {
          "bloqInputId": "PIN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "75eed2c6-1bd4-44af-8f19-e744df2e4024"
        }
      ]
    ],
    "code": "digitalRead({PIN})",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "digitalRead({PIN})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"digitalReadAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "digitalWrite",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b870d27f-353a-4e06-ab70-dd85cbf98d2f"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "pinLevels",
          "number",
          "selectVariable"
        ],
        "name": "0dd3ebbf-32bb-4fbe-a2b0-cb3a075989f2"
      }
    ],
    "bloqClass": "bloq-pin-writte-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-pin-digital-write"
        },
        {
          "bloqInputId": "PIN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b870d27f-353a-4e06-ab70-dd85cbf98d2f"
        },
        {
          "alias": "text",
          "value": "bloq-pin-digital-write-data-V1"
        },
        {
          "bloqInputId": "DATA",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "pinLevels",
            "number",
            "selectVariable"
          ],
          "name": "0dd3ebbf-32bb-4fbe-a2b0-cb3a075989f2"
        }
      ]
    ],
    "code": "digitalWrite({PIN},{DATA});",
    "arduino": {
      "code": "digitalWrite({PIN},{DATA});",
      "setupExtraCode": "pinMode({PIN}, OUTPUT);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"digitalWrite\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdTurnOnOffAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "a505b886-57a7-42b2-97d9-b9d8bdb10b6b"
      }
    ],
    "bloqClass": "bloq-lcd-turn-on-off-advanced",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-lcd-turn-on-off-advanced-turnon",
              "value": "HIGH"
            },
            {
              "label": "bloq-lcd-turn-on-off-advanced-turnoff",
              "value": "LOW"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-lcd-turn-on-off-advanced-lcdLigth"
        },
        {
          "bloqInputId": "LCD",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "a505b886-57a7-42b2-97d9-b9d8bdb10b6b"
        }
      ]
    ],
    "code": "{LCD}.setBacklight({STATE});",
    "arduino": {
      "code": "{LCD}.setBacklight({STATE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdTurnOnOffAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdWriteAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "c3eb9d70-6ec1-45b1-8f25-5adfc38b9101"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "06226009-373a-4a0d-9d47-d3fef71a7ea3"
      }
    ],
    "bloqClass": "bloq-lcd-writte-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-lcd-writte-advanced-write"
        },
        {
          "bloqInputId": "TEXT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "selectVariable"
          ],
          "name": "c3eb9d70-6ec1-45b1-8f25-5adfc38b9101"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-advanced-inLCD"
        },
        {
          "bloqInputId": "LCD",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "06226009-373a-4a0d-9d47-d3fef71a7ea3"
        }
      ]
    ],
    "code": "{LCD}.print({TEXT});",
    "arduino": {
      "code": "{LCD}.print({TEXT});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdWriteAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdWritePositionAdvanced-v1",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "0484d3ad-6b2b-40b9-8a5a-a8992a69a02d"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "0946244b-ebb8-4e9f-85cc-7cac3307d2bd"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b3a78e26-6331-40f1-b028-f0d5b81a8fb8"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b8babe95-0b8b-43a6-85f4-5b5459222b35"
      }
    ],
    "bloqClass": "bloq-lcd-writte",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-lcd-writte-write"
        },
        {
          "bloqInputId": "TEXT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "selectVariable"
          ],
          "name": "0484d3ad-6b2b-40b9-8a5a-a8992a69a02d"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-inLCD"
        },
        {
          "bloqInputId": "LCD",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "0946244b-ebb8-4e9f-85cc-7cac3307d2bd"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-advanced-inPosition"
        },
        {
          "bloqInputId": "COLUMN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b3a78e26-6331-40f1-b028-f0d5b81a8fb8"
        },
        {
          "bloqInputId": "ROW",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b8babe95-0b8b-43a6-85f4-5b5459222b35"
        }
      ]
    ],
    "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});",
    "arduino": {
      "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdWritePositionAdvanced-v1\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "ledAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "78d98941-5941-42a4-94bb-4b04cb3c03c0"
      }
    ],
    "bloqClass": "bloq-led-advanced",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-led-advanced-turnon",
              "value": "HIGH"
            },
            {
              "label": "bloq-led-advanced-turnoff",
              "value": "LOW"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-led-advanced-theLED"
        },
        {
          "bloqInputId": "LED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "78d98941-5941-42a4-94bb-4b04cb3c03c0"
        }
      ]
    ],
    "code": "digitalWrite({LED},{STATE});",
    "arduino": {
      "code": "digitalWrite({LED},{STATE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"ledAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "oscillatorAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "59d3d419-c6a7-4a22-90c5-eb138ddc5c83"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "e87517cd-0620-4bc4-84ad-437f882c67d8"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "e09caa55-3e94-4c5d-b5a2-d22b24b89ec9"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5c21d522-b889-4ee4-bba2-b6e5a69f4ebc"
      }
    ],
    "bloqClass": "bloq-oscillator-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-oscillator-advanced-oscillate"
        },
        {
          "bloqInputId": "OSCILLATOR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "59d3d419-c6a7-4a22-90c5-eb138ddc5c83"
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-advanced-around"
        },
        {
          "bloqInputId": "PHASE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "e87517cd-0620-4bc4-84ad-437f882c67d8"
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-advanced-amplitude"
        },
        {
          "bloqInputId": "AMPLITUDE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "e09caa55-3e94-4c5d-b5a2-d22b24b89ec9"
        },
        {
          "alias": "text",
          "value": "bloq-common-every"
        },
        {
          "bloqInputId": "SPEED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "5c21d522-b889-4ee4-bba2-b6e5a69f4ebc"
        },
        {
          "alias": "text",
          "value": "bloq-common-ms"
        }
      ]
    ],
    "code": "{OSCILLATOR}.SetO({PHASE});\n{OSCILLATOR}.SetA({AMPLITUDE});\n{OSCILLATOR}.SetT({SPEED});\n{OSCILLATOR}.refresh();",
    "arduino": {
      "code": "{OSCILLATOR}.SetO({PHASE});\n{OSCILLATOR}.SetA({AMPLITUDE});\n{OSCILLATOR}.SetT({SPEED});\n{OSCILLATOR}.refresh();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"oscillatorAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "oscillatorStartAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "b03b8c19-6c02-4e52-91c1-1f4406ba38b8"
      }
    ],
    "bloqClass": "bloq-oscillator-start-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-oscillator-start-advanced-oscillator"
        },
        {
          "bloqInputId": "OSCILLATOR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "b03b8c19-6c02-4e52-91c1-1f4406ba38b8"
        }
      ]
    ],
    "code": "{OSCILLATOR}.start()",
    "arduino": {
      "code": "{OSCILLATOR}.start()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"oscillatorStartAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "oscillatorStopAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "476eb149-6ef6-4b88-b1bd-ae4dd458ba6d"
      }
    ],
    "bloqClass": "bloq-oscillator-stop-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-oscillator-stop-advanced-stop"
        },
        {
          "bloqInputId": "OSCILLATOR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "476eb149-6ef6-4b88-b1bd-ae4dd458ba6d"
        }
      ]
    ],
    "code": "{OSCILLATOR}.stop()",
    "arduino": {
      "code": "{OSCILLATOR}.stop()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"oscillatorStopAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "pinLevels",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-pinlevels",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-pinlevel-high",
              "value": "HIGH"
            },
            {
              "label": "bloq-pinlevel-low",
              "value": "LOW"
            }
          ]
        }
      ]
    ],
    "code": "{STATE}",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "{STATE}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"pinLevels\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "servoNormalAdvanced-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "597fbc49-5e42-4356-98dc-8598983908b1"
      }
    ],
    "bloqClass": "bloq-servo-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-servo-advanced-move"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "servos"
        },
        {
          "alias": "text",
          "value": "bloq-servo-advanced-to"
        },
        {
          "bloqInputId": "POSITION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "597fbc49-5e42-4356-98dc-8598983908b1"
        },
        {
          "alias": "text",
          "value": "bloq-servo-advanced-degrees"
        }
      ]
    ],
    "code": "{SERVO}.write({POSITION});",
    "arduino": {
      "code": "{SERVO}.write({POSITION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"servoNormalAdvanced-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "servoAttach",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-servo-attach",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-servo-attach"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "allServos"
        }
      ]
    ],
    "code": "{SERVO}.attach({SERVO.pin});",
    "arduino": {
      "code": "{SERVO}.attach(º[{SERVO}.pin.s]);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"servoAttach\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "servoDetach",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-servo-detach",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-servo-detach"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "allServos"
        }
      ]
    ],
    "code": "{SERVO}.detach();",
    "arduino": {
      "code": "{SERVO}.detach();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"servoDetach\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "stopBuzzer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-buzzer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-stop-buzzer"
        },
        {
          "id": "BUZZER",
          "alias": "dynamicDropdown",
          "options": "buzzers"
        }
      ]
    ],
    "code": "noTone({BUZZER});",
    "arduino": {
      "needInstanceOf": [
        {
          "name": "{BUZZER}",
          "type": "const int",
          "equals": "º[{BUZZER}.pin.s]"
        }
      ],
      "code": "noTone({BUZZER});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"stopBuzzer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "buzzer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-buzzer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-sound"
        },
        {
          "id": "BUZZER",
          "alias": "dynamicDropdown",
          "options": "buzzers"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-note"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-ms"
        }
      ]
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
    "arduino": {
      "needInstanceOf": [
        {
          "name": "{BUZZER}",
          "type": "const int",
          "equals": "º[{BUZZER}.pin.s]"
        }
      ],
      "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"buzzer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "continuousServoStart",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-continuous-servo-start",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-continuous-servo-start-turn"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "continuousServos"
        },
        {
          "alias": "text",
          "value": "bloq-continuous-servo-start-direction"
        },
        {
          "id": "DIRECTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-continuous-servo-start-clockwise",
              "value": "180"
            },
            {
              "label": "bloq-continuous-servo-start-counterclockwise",
              "value": "0"
            }
          ]
        }
      ]
    ],
    "code": "{SERVO}.write({DIRECTION});",
    "arduino": {
      "includes": [
        "Servo.h"
      ],
      "needInstanceOf": [
        {
          "name": "{SERVO}",
          "type": "Servo"
        }
      ],
      "setupExtraCode": "{SERVO}.attach(º[{SERVO}.pin.s]);",
      "code": "{SERVO}.write({DIRECTION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"continuousServoStart\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "continuousServoStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-continuous-servo-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-continuous-servo-stop-stop"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "continuousServos"
        }
      ]
    ],
    "code": "{SERVO}.write(90);",
    "arduino": {
      "includes": [
        "Servo.h"
      ],
      "needInstanceOf": [
        {
          "name": "{SERVO}",
          "type": "Servo"
        }
      ],
      "setupExtraCode": "{SERVO}.attach(º[{SERVO}.pin.s]);",
      "code": "{SERVO}.write(90);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"continuousServoStop\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "buzzerAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "597fec45-add4-4976-88cc-34d91eba15b4"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "06d4b1c0-53cc-4aec-bba5-4c81465335f4"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "69dc430d-7379-4a5c-9fe9-7577c10cdda9"
      }
    ],
    "bloqClass": "bloq-buzzer-advance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-sound"
        },
        {
          "bloqInputId": "BUZZER",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "597fec45-add4-4976-88cc-34d91eba15b4"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-note"
        },
        {
          "bloqInputId": "NOTE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "06d4b1c0-53cc-4aec-bba5-4c81465335f4"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-for"
        },
        {
          "bloqInputId": "SECONDS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "69dc430d-7379-4a5c-9fe9-7577c10cdda9"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-ms"
        }
      ]
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
    "arduino": {
      "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"buzzerAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "continuousServoStartAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-continuous-servo-start-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-continuous-servo-start-advanced-turn"
        },
        {
          "continuousServoStartAdvancedInputId": "SERVO",
          "alias": "continuousServoStartAdvancedInput",
          "acceptType": [
            "all"
          ]
        },
        {
          "alias": "text",
          "value": "bloq-continuous-servo-start-advanced-direction"
        },
        {
          "id": "DIRECTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-continuous-servo-start-advanced-clockwise",
              "value": "0"
            },
            {
              "label": "bloq-continuous-servo-start-advanced-counterclockwise",
              "value": "180"
            }
          ]
        }
      ]
    ],
    "code": "{SERVO}.write({DIRECTION});",
    "arduino": {
      "includes": [
        "Servo.h"
      ],
      "needInstanceOf": [
        {
          "name": "{SERVO}",
          "type": "Servo"
        }
      ],
      "setupExtraCode": "{SERVO}.attach(º[{SERVO}.pin.s]);",
      "code": "{SERVO}.write({DIRECTION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"continuousServoStartAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdWritePositionAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "340b8f27-3c6f-4dac-94f7-22cd0f2cdd22"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "c045baca-1598-44b6-9d14-f1e2e60545a8"
      }
    ],
    "bloqClass": "bloq-lcd-writte deprecated",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-lcd-writte-write"
        },
        {
          "bloqInputId": "TEXT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "340b8f27-3c6f-4dac-94f7-22cd0f2cdd22"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-inLCD"
        },
        {
          "bloqInputId": "LCD",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "c045baca-1598-44b6-9d14-f1e2e60545a8"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-advanced-inPosition"
        },
        {
          "id": "COLUMN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "id": "ROW",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});",
    "arduino": {
      "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print({TEXT});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdWritePositionAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "pinReadAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "53b4800c-8ebc-4cff-91b6-eea3e52b44c1"
      }
    ],
    "bloqClass": "bloq-pin-read-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-pin-read-advanced-readpin"
        },
        {
          "bloqInputId": "PIN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "53b4800c-8ebc-4cff-91b6-eea3e52b44c1"
        }
      ]
    ],
    "code": "'{PIN}'.indexOf('A') !== -1 ? 'analogRead({PIN})' : 'digitalRead({PIN})'",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "¬{PIN.readPin}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"pinReadAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "pinWriteAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "3193b512-5614-4869-aaf7-00213e178aaa"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "8bf1b0ce-95cf-405a-b1bc-bdee0517fe34"
      }
    ],
    "bloqClass": "bloq-pin-writte-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-pin-writte-advanced-writepin"
        },
        {
          "bloqInputId": "PIN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "3193b512-5614-4869-aaf7-00213e178aaa"
        },
        {
          "alias": "text",
          "value": "bloq-pin-writte-advanced-data"
        },
        {
          "bloqInputId": "DATA",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "8bf1b0ce-95cf-405a-b1bc-bdee0517fe34"
        }
      ]
    ],
    "code": "'{PIN}'.indexOf('A') === 0 ? 'analogWrite({PIN},{DATA});' : 'digitalWrite({PIN},{DATA});'",
    "arduino": {
      "code": "digitalWrite({PIN},{DATA});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"pinWriteAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "readSensorAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "0b7ba1d3-2daa-4f99-99bd-d5e349283807"
      }
    ],
    "bloqClass": "bloq-read-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-read-advanced-read"
        },
        {
          "bloqInputId": "PIN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "0b7ba1d3-2daa-4f99-99bd-d5e349283807"
        }
      ]
    ],
    "code": "{SENSOR.type}",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "SENSOR",
      "options": "sensors"
    },
    "arduino": {
      "code": "¬{PIN.readSensor}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"readSensorAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "clockRTC",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-rtc",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rtc"
        },
        {
          "id": "RTC_FUNC",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-rtc-date",
              "value": "getDate"
            },
            {
              "label": "bloq-rtc-time",
              "value": "getTime"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-rtc-using"
        },
        {
          "id": "RTC",
          "alias": "dynamicDropdown",
          "options": "clocks"
        }
      ]
    ],
    "code": "{RTC}.{RTC_FUNC}()",
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "arduino": {
      "code": "{RTC}.{RTC_FUNC}()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"clockRTC\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "servoNormalAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "hwVariable",
          "selectVariable"
        ],
        "name": "6448d1c0-de46-47f3-8d0a-a45d7b024b13"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "268b8e23-9f2f-466b-b8da-9189de86958f"
      }
    ],
    "bloqClass": "bloq-servo-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-servo-advanced-move"
        },
        {
          "bloqInputId": "SERVO",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "hwVariable",
            "selectVariable"
          ],
          "name": "6448d1c0-de46-47f3-8d0a-a45d7b024b13"
        },
        {
          "alias": "text",
          "value": "bloq-servo-advanced-to"
        },
        {
          "bloqInputId": "POSITION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "268b8e23-9f2f-466b-b8da-9189de86958f"
        },
        {
          "alias": "text",
          "value": "bloq-servo-advanced-degrees"
        }
      ]
    ],
    "code": "{SERVO}.write({POSITION});",
    "arduino": {
      "code": "{SERVO}.write({POSITION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"servoNormalAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "motorSetSpeed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-shield-DCmotor-spin"
        },
        {
          "id": "MOTOR",
          "alias": "dynamicDropdown",
          "options": "drivegearmotor"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "id": "SPEED",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "(-255,255)"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{MOTOR}.setSpeed({SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"motorSetSpeed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "motorSetSpeedAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0f60dfda-7581-4964-89dc-1fc87efd341d"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-shield-DCmotor-spin"
        },
        {
          "id": "MOTOR",
          "alias": "dynamicDropdown",
          "options": "drivegearmotor"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "bloqInputId": "SPEED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "0f60dfda-7581-4964-89dc-1fc87efd341d"
        },
        {
          "alias": "text",
          "value": "(-255,255)"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{MOTOR}.setSpeed({SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"motorSetSpeedAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "hts221Humidity",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-hts221-humidity",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-hts221-humidity"
        },
        {
          "id": "SENSOR",
          "alias": "dynamicDropdown",
          "options": "hts221"
        }
      ]
    ],
    "code": "{SENSOR}.getHumidity()",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "Wire.h",
        "BitbloqHTS221.h",
        "HTS221_Registers.h"
      ],
      "needInstanceOf": [
        {
          "name": "{SENSOR}",
          "type": "HTS221"
        }
      ],
      "setupExtraCode": "Wire.begin();\n{SENSOR}.begin();",
      "code": "{SENSOR}.getHumidity()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"hts221Humidity\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "hts221Temperature",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-hts221-temperature",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-hts221-temperature"
        },
        {
          "id": "SENSOR",
          "alias": "dynamicDropdown",
          "options": "hts221"
        }
      ]
    ],
    "code": "{SENSOR}.getTemperature()",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "Wire.h",
        "BitbloqHTS221.h",
        "HTS221_Registers.h"
      ],
      "needInstanceOf": [
        {
          "name": "{SENSOR}",
          "type": "HTS221"
        }
      ],
      "setupExtraCode": "Wire.begin();\n{SENSOR}.begin();",
      "code": "{SENSOR}.getTemperature()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"hts221Temperature\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdClear",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-lcd-clear",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-lcd-clear"
        },
        {
          "id": "LCD",
          "alias": "dynamicDropdown",
          "options": "lcds"
        }
      ]
    ],
    "code": "{LCD}.clear();",
    "arduino": {
      "code": "{LCD}.clear();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdClear\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdTurnOnOff",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-lcd-turn-on-off",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-lcd-turn-on-off-turnon",
              "value": "HIGH"
            },
            {
              "label": "bloq-lcd-turn-on-off-turnoff",
              "value": "LOW"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-lcd-turn-on-off-lcdLigth"
        },
        {
          "id": "LCD",
          "alias": "dynamicDropdown",
          "options": "lcds"
        }
      ]
    ],
    "code": "{LCD}.setBacklight({STATE});",
    "arduino": {
      "code": "{LCD}.setBacklight({STATE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdTurnOnOff\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdWrite",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-lcd-writte",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-lcd-writte-write"
        },
        {
          "id": "TEXT",
          "alias": "stringInput",
          "defaultValue": "bloq-lcd-default"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-inLCD"
        },
        {
          "id": "LCD",
          "alias": "dynamicDropdown",
          "options": "lcds"
        }
      ]
    ],
    "code": "{LCD}.print(\"{TEXT}\");",
    "arduino": {
      "code": "{LCD}.print(\"{TEXT}\");"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdWrite\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "lcdWritePosition",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-lcd-writte",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-lcd-writte-write"
        },
        {
          "id": "TEXT",
          "alias": "stringInput",
          "defaultValue": "bloq-lcd-default"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-inLCD"
        },
        {
          "id": "LCD",
          "alias": "dynamicDropdown",
          "options": "lcds"
        },
        {
          "alias": "text",
          "value": "bloq-lcd-writte-advanced-inPosition"
        },
        {
          "id": "COLUMN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "id": "ROW",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print(\"{TEXT}\");",
    "arduino": {
      "code": "{LCD}.setCursor({COLUMN},{ROW});{LCD}.print(\"{TEXT}\");"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"lcdWritePosition\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "led",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-led",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-led-turnon",
              "value": "HIGH"
            },
            {
              "label": "bloq-led-turnoff",
              "value": "LOW"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-led-theLED"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "leds"
        }
      ]
    ],
    "code": "digitalWrite({LED},{STATE});",
    "arduino": {
      "needInstanceOf": [
        {
          "name": "{LED}",
          "type": "const int",
          "equals": "º[{LED}.pin.s]"
        }
      ],
      "setupExtraCode": "pinMode({LED}, OUTPUT);",
      "code": "digitalWrite({LED},{STATE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"led\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "oscillator",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-oscillator",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-oscillator-oscillate"
        },
        {
          "id": "OSCILLATOR",
          "alias": "dynamicDropdown",
          "options": "oscillators"
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-around"
        },
        {
          "id": "PHASE",
          "alias": "numberInput",
          "value": 90
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-amplitude"
        },
        {
          "id": "AMPLITUDE",
          "alias": "numberInput",
          "value": 90
        },
        {
          "alias": "text",
          "value": "bloq-common-every"
        },
        {
          "id": "SPEED",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "alias": "text",
          "value": "bloq-common-ms"
        }
      ]
    ],
    "code": "{OSCILLATOR}.SetO({PHASE});{OSCILLATOR}.SetA({AMPLITUDE});{OSCILLATOR}.SetT({SPEED});{OSCILLATOR}.refresh();",
    "arduino": {
      "includes": [
        "Servo.h",
        "Wire.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "{OSCILLATOR}",
          "type": "Oscillator"
        }
      ],
      "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
      "code": "{OSCILLATOR}.SetO({PHASE});{OSCILLATOR}.SetA({AMPLITUDE});{OSCILLATOR}.SetT({SPEED});{OSCILLATOR}.refresh();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"oscillator\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "oscillatorStart",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-oscillator-start",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-oscillator-start-oscillator"
        },
        {
          "id": "OSCILLATOR",
          "alias": "dynamicDropdown",
          "options": "oscillators"
        }
      ]
    ],
    "code": "{OSCILLATOR}.Play();{OSCILLATOR}.refresh();",
    "arduino": {
      "includes": [
        "Servo.h",
        "Wire.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "{OSCILLATOR}",
          "type": "Oscillator"
        }
      ],
      "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
      "code": "{OSCILLATOR}.Play();{OSCILLATOR}.refresh();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"oscillatorStart\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "oscillatorStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-oscillator-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-oscillator-stop-stop"
        },
        {
          "id": "OSCILLATOR",
          "alias": "dynamicDropdown",
          "options": "oscillators"
        }
      ]
    ],
    "code": "{OSCILLATOR}.Stop();",
    "arduino": {
      "includes": [
        "Servo.h",
        "Wire.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "{OSCILLATOR}",
          "type": "Oscillator"
        }
      ],
      "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
      "code": "{OSCILLATOR}.Stop();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"oscillatorStop\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "oscillatorTimes",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-oscillator",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-oscillator-oscillate"
        },
        {
          "id": "OSCILLATOR",
          "alias": "dynamicDropdown",
          "options": "oscillators"
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-around"
        },
        {
          "id": "PHASE",
          "alias": "numberInput",
          "value": 90
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-amplitude"
        },
        {
          "id": "AMPLITUDE",
          "alias": "numberInput",
          "value": 90
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-speed"
        },
        {
          "id": "SPEED",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "id": "TIMES",
          "alias": "numberInput",
          "value": 2
        },
        {
          "alias": "text",
          "value": "bloq-oscillator-times"
        }
      ]
    ],
    "code": "oscillate({OSCILLATOR}, {AMPLITUDE}, {PHASE}, {SPEED}, {TIMES});",
    "arduino": {
      "includes": [
        "Servo.h",
        "Wire.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "{OSCILLATOR}",
          "type": "Oscillator"
        }
      ],
      "setupExtraCode": "{OSCILLATOR}.attach(º[{OSCILLATOR}.pin.s]);",
      "code": "oscillate({OSCILLATOR}, {AMPLITUDE}, {PHASE}, {SPEED}, {TIMES});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"oscillatorTimes\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "readJoystickXY",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-read-mkb_joystick"
        },
        {
          "id": "OPTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "X",
              "value": "X"
            },
            {
              "label": "Y",
              "value": "Y"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-of-joystick"
        },
        {
          "id": "JOYSTICK",
          "alias": "dynamicDropdown",
          "options": "joystick"
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "conditional": {
        "aliasId": "OPTION",
        "code": {
          "X": "{JOYSTICK}.readPinX()",
          "Y": "{JOYSTICK}.readPinY()"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"readJoystickXY\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "readSensor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-read-sensor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-read-read"
        },
        {
          "id": "SENSOR",
          "alias": "dynamicDropdown",
          "options": "sensors"
        }
      ]
    ],
    "code": "{SENSOR.type}",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "SENSOR",
      "options": "sensors"
    },
    "arduino": {
      "code": "¬{SENSOR.readSensor}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"readSensor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "clockRTCAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-rtc-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rtc-advanced"
        },
        {
          "id": "FUNCTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-rtc-date-2",
              "value": "getDate",
              "type": "String"
            },
            {
              "label": "bloq-rtc-time-2",
              "value": "getTime",
              "type": "String"
            },
            {
              "label": "bloq-rtc-hour",
              "value": "getHour",
              "type": "float"
            },
            {
              "label": "bloq-rtc-minute",
              "value": "getMinute",
              "type": "float"
            },
            {
              "label": "bloq-rtc-second",
              "value": "getSecond",
              "type": "float"
            },
            {
              "label": "bloq-rtc-day",
              "value": "getDay",
              "type": "float"
            },
            {
              "label": "bloq-rtc-month",
              "value": "getMonth",
              "type": "float"
            },
            {
              "label": "bloq-rtc-year",
              "value": "getYear",
              "type": "float"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-rtc-using-advanced"
        },
        {
          "id": "RTC",
          "alias": "dynamicDropdown",
          "options": "clocks"
        }
      ]
    ],
    "code": "{RTC}.{FUNCTION}()",
    "returnType": {
      "type": "fromStaticDropdownProperty",
      "idDropdown": "FUNCTION",
      "dropdownProperty": "type"
    },
    "arduino": {
      "code": "{RTC}.{FUNCTION}()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"clockRTCAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "clockRTCInit",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-rtc-init",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rtc-init"
        },
        {
          "id": "RTC",
          "alias": "dynamicDropdown",
          "options": "clocks"
        }
      ]
    ],
    "code": "{RTC}.adjust(DateTime(__DATE__, __TIME__));",
    "arduino": {
      "code": "{RTC}.adjust(DateTime(__DATE__, __TIME__));"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"clockRTCInit\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "servoNormal",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-servo",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-servo-move"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "servos"
        },
        {
          "alias": "text",
          "value": "bloq-servo-to"
        },
        {
          "id": "POSITION",
          "alias": "numberInput",
          "value": 90
        },
        {
          "alias": "text",
          "value": "bloq-servo-degrees"
        }
      ]
    ],
    "code": "{SERVO}.write({POSITION});",
    "arduino": {
      "code": "{SERVO}.write({POSITION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"servoNormal\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "caseAdvanced-v1",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "switchChildren",
          "case"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "case"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string"
        ],
        "name": "afb9e900-1853-4c31-9103-f3b6dfaef9ea"
      }
    ],
    "bloqClass": "bloq-case",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-case-ifSameTo"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string"
          ],
          "name": "afb9e900-1853-4c31-9103-f3b6dfaef9ea"
        },
        {
          "alias": "text",
          "value": "bloq-case-exec"
        }
      ]
    ],
    "code": "case {VALUE}:{STATEMENTS}break;",
    "arduino": {
      "code": "case {VALUE}:{STATEMENTS}break;"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"caseAdvanced-v1\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "elseifAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "ifDown",
          "elseifDown"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "elseifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "equalityOperations",
          "logicOperations"
        ],
        "name": "d4e3ba6e-9fe3-443e-abf1-ed9def5cd8e6"
      }
    ],
    "bloqClass": "bloq-else-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-else-if-if"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "equalityOperations",
            "logicOperations"
          ],
          "name": "d4e3ba6e-9fe3-443e-abf1-ed9def5cd8e6"
        },
        {
          "alias": "text",
          "value": "bloq-else-if-else"
        }
      ]
    ],
    "code": "else if ({VAR}){{STATEMENTS}}",
    "arduino": {
      "code": "else if ({VAR}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"elseifAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "forAdvanced-v1",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "3f122684-f643-4ab6-a83d-577b551dc616"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "07d522e4-fbaf-41bf-a4ee-b523477ca26b"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "c6414b2c-82b9-4402-b09d-2dca65ad3326"
      }
    ],
    "bloqClass": "bloq-for",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-for-count"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable"
          ],
          "name": "3f122684-f643-4ab6-a83d-577b551dc616"
        },
        {
          "alias": "text",
          "value": "bloq-for-from"
        },
        {
          "bloqInputId": "INIT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "07d522e4-fbaf-41bf-a4ee-b523477ca26b"
        },
        {
          "alias": "text",
          "value": "bloq-for-to"
        },
        {
          "bloqInputId": "FINAL",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "c6414b2c-82b9-4402-b09d-2dca65ad3326"
        },
        {
          "id": "MODE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-for-add",
              "value": "+"
            },
            {
              "label": "bloq-for-subtract",
              "value": "-"
            }
          ]
        },
        {
          "id": "ADD",
          "alias": "numberInput",
          "value": 1
        },
        {
          "alias": "text",
          "value": "bloq-for-exec"
        }
      ]
    ],
    "code": "'for({VAR}={INIT};{VAR}' + ('{MODE}' === '+'?'<=':'>=' ) + '{FINAL};{VAR}{MODE}={ADD}){{STATEMENTS}}'",
    "arduino": {
      "conditional": {
        "aliasId": "MODE",
        "code": {
          "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
          "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"forAdvanced-v1\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "ifAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "equalityOperations",
          "logicOperations"
        ],
        "name": "50c929d4-e3e5-43bf-9bf9-46524406ca85"
      }
    ],
    "bloqClass": "bloq-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-if-if"
        },
        {
          "bloqInputId": "CONDITION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "equalityOperations",
            "logicOperations"
          ],
          "name": "50c929d4-e3e5-43bf-9bf9-46524406ca85"
        },
        {
          "alias": "text",
          "value": "bloq-if-exec"
        }
      ]
    ],
    "code": "if({CONDITION}){{STATEMENTS}}",
    "arduino": {
      "code": "if({CONDITION}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"ifAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "magicForAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "number"
        ],
        "name": "2273d3c9-2f47-44b2-90e6-7094c0b9d4ec"
      }
    ],
    "bloqClass": "bloq-magicfor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-magicfor-repeat"
        },
        {
          "bloqInputId": "TIMES",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable",
            "number"
          ],
          "name": "2273d3c9-2f47-44b2-90e6-7094c0b9d4ec"
        },
        {
          "alias": "text",
          "value": "bloq-magicfor-times"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "for(int bitbloqForCounter=0;bitbloqForCounter < {TIMES};bitbloqForCounter += 1){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"magicForAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "switchAdvanced-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top",
        "acceptedAliases": [
          "switchChildren"
        ]
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "readSensor"
        ],
        "name": "ebbdfe5e-cfc8-44ad-8c26-eac96b62ff86"
      }
    ],
    "bloqClass": "bloq-switch",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-switch-check"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable",
            "readSensor"
          ],
          "name": "ebbdfe5e-cfc8-44ad-8c26-eac96b62ff86"
        }
      ]
    ],
    "code": "switch ({VAR}) {{STATEMENTS}}",
    "arduino": {
      "code": "switch ({VAR}) {{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"switchAdvanced-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "waitAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "cccd224b-f0bc-410c-a0e6-81a941ca9492"
      }
    ],
    "bloqClass": "bloq-wait",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-wait-wait"
        },
        {
          "bloqInputId": "TIME",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "cccd224b-f0bc-410c-a0e6-81a941ca9492"
        }
      ]
    ],
    "code": "delay({TIME});",
    "arduino": {
      "code": "delay({TIME});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"waitAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "whileAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "equalityOperations",
          "logicOperations"
        ],
        "name": "6ef878f6-0052-4ac9-aa4b-7a82e036ad7b"
      }
    ],
    "bloqClass": "bloq-while",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-while-while"
        },
        {
          "bloqInputId": "CONDITION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "equalityOperations",
            "logicOperations"
          ],
          "name": "6ef878f6-0052-4ac9-aa4b-7a82e036ad7b"
        },
        {
          "alias": "text",
          "value": "bloq-while-exec"
        }
      ]
    ],
    "code": "while ({CONDITION}){{STATEMENTS}}",
    "arduino": {
      "code": "while ({CONDITION}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"whileAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "break",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-break",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-break-stopLoop"
        }
      ]
    ],
    "code": "break;",
    "arduino": {
      "code": "break;"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"break\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "case",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "switchChildren",
          "case"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "case"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-case",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-case-ifSameTo"
        },
        {
          "id": "VAR",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-case-exec"
        }
      ]
    ],
    "code": "case {VAR}:{STATEMENTS}break;",
    "arduino": {
      "code": "case {VAR}:{STATEMENTS}break;"
    },
    "suggestedBloqs": [
      "case",
      "caseDefault"
    ],
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"case\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "caseDefault",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "switchChildren",
          "case"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-case-default",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-case-default-inOtherCase"
        }
      ]
    ],
    "code": "default:{STATEMENTS}break;",
    "arduino": {
      "code": "default:{STATEMENTS}break;"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"caseDefault\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "continue",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-continue",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-continue-continue"
        }
      ]
    ],
    "code": "continue;",
    "arduino": {
      "code": "continue;"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"continue\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "for",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-for deprecated",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-for-count"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "bloq-for-from"
        },
        {
          "id": "INIT",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-for-to"
        },
        {
          "id": "FINAL",
          "alias": "numberInput",
          "value": 10
        },
        {
          "id": "MODE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-for-add",
              "value": "++"
            },
            {
              "label": "bloq-for-subtract",
              "value": "--"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-for-exec"
        }
      ]
    ],
    "code": "for({VAR}={INIT};{VAR}<{FINAL};{VAR}{MODE}){{STATEMENTS}}",
    "arduino": {
      "conditional": {
        "aliasId": "MODE",
        "code": {
          "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
          "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"for\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "forAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "4f049839-04ce-447a-afb2-7fd1dec3c12d"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "8b06bc86-105f-4122-9986-f131769e569e"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "6e7160b0-1f53-41f6-bf21-cd615a71c4ca"
      }
    ],
    "bloqClass": "bloq-for deprecated",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-for-count"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "4f049839-04ce-447a-afb2-7fd1dec3c12d"
        },
        {
          "alias": "text",
          "value": "bloq-for-from"
        },
        {
          "bloqInputId": "INIT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "8b06bc86-105f-4122-9986-f131769e569e"
        },
        {
          "alias": "text",
          "value": "bloq-for-to"
        },
        {
          "bloqInputId": "FINAL",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "6e7160b0-1f53-41f6-bf21-cd615a71c4ca"
        },
        {
          "id": "MODE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-for-add",
              "value": "++"
            },
            {
              "label": "bloq-for-subtract",
              "value": "--"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-for-exec"
        }
      ]
    ],
    "code": "for({VAR}={INIT};{VAR}<{FINAL};{VAR}{MODE}){{STATEMENTS}}",
    "arduino": {
      "conditional": {
        "aliasId": "MODE",
        "code": {
          "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
          "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"forAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "switchAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "7ab11b58-376b-4a0c-9240-0cdbcb96de3e"
      }
    ],
    "bloqClass": "bloq-switch",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-switch-check"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "7ab11b58-376b-4a0c-9240-0cdbcb96de3e"
        }
      ]
    ],
    "code": "switch (int({VAR})) {{STATEMENTS}}",
    "arduino": {
      "code": "switch (int({VAR})) {{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"switchAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "else",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "ifDown",
          "elseifDown"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-else",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-else-else"
        }
      ]
    ],
    "code": "else {{STATEMENTS}}",
    "python": {
      "codeLines": [
        {
          "code": "else:"
        },
        {
          "indentation": 1,
          "code": "{STATEMENTS}"
        }
      ]
    },
    "arduino": {
      "code": "else {{STATEMENTS}}"
    }
  },
  {
    "type": "statement-input",
    "name": "elseif",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "ifDown",
          "elseifDown"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "elseifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "87ba7161-284f-48ec-a0b5-7540d798f5cf"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "a7b3bd37-17f3-4817-9680-966cce84ac76"
      }
    ],
    "bloqClass": "bloq-else-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-else-if-if"
        },
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "readSensor"
          ],
          "name": "87ba7161-284f-48ec-a0b5-7540d798f5cf"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "=",
              "value": "=="
            },
            {
              "label": "!=",
              "value": "!="
            },
            {
              "label": ">",
              "value": ">"
            },
            {
              "label": ">=",
              "value": ">="
            },
            {
              "label": "<",
              "value": "<"
            },
            {
              "label": "<=",
              "value": "<="
            }
          ]
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "readSensor"
          ],
          "name": "a7b3bd37-17f3-4817-9680-966cce84ac76"
        },
        {
          "alias": "text",
          "value": "bloq-else-if-else"
        }
      ]
    ],
    "suggestedBloqs": [
      "else",
      "elseif"
    ],
    "code": "else if ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}",
    "python": {
      "codeLines": [
        {
          "code": "elif({ARG1} {OPERATOR} {ARG2}):"
        },
        {
          "indentation": 1,
          "code": "{STATEMENTS}"
        }
      ]
    },
    "arduino": {
      "code": "else if ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}"
    }
  },
  {
    "type": "statement-input",
    "name": "for-v1",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-for",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-for-count"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "bloq-for-from"
        },
        {
          "id": "INIT",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-for-to"
        },
        {
          "id": "FINAL",
          "alias": "numberInput",
          "value": 10
        },
        {
          "id": "MODE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-for-add",
              "value": "+"
            },
            {
              "label": "bloq-for-subtract",
              "value": "-"
            }
          ]
        },
        {
          "id": "ADD",
          "alias": "numberInput",
          "value": 1
        },
        {
          "alias": "text",
          "value": "bloq-for-exec"
        }
      ]
    ],
    "code": "'for({VAR}={INIT};{VAR}' + ('{MODE}' === '+'?'<=':'>=' ) + '{FINAL};{VAR}{MODE}={ADD}){{STATEMENTS}}'",
    "arduino": {
      "conditional": {
        "aliasId": "MODE",
        "code": {
          "+": "for({VAR}={INIT};{VAR} <= {FINAL};{VAR} += {ADD}){{STATEMENTS}}",
          "-": "for({VAR}={INIT};{VAR} >= {FINAL};{VAR} -= {ADD}){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "conditional": {
            "aliasId": "MODE",
            "code": {
              "+": "for {VAR} in range({INIT}, {FINAL}):",
              "-": "for {VAR} in range({FINAL}, {INIT}, -1):"
            }
          }
        },
        {
          "indentation": 1,
          "code": "{STATEMENTS}"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "if",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "af10b5d4-7532-4c91-8bae-3f798ed40c8e"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "boolean",
          "selectVariable",
          "readSensor"
        ],
        "name": "73a0b2d5-9e62-4ccd-92ca-6a3493dfc072"
      }
    ],
    "bloqClass": "bloq-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-if-if"
        },
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "readSensor"
          ],
          "name": "af10b5d4-7532-4c91-8bae-3f798ed40c8e"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "=",
              "value": "=="
            },
            {
              "label": "!=",
              "value": "!="
            },
            {
              "label": ">",
              "value": ">"
            },
            {
              "label": ">=",
              "value": ">="
            },
            {
              "label": "<",
              "value": "<"
            },
            {
              "label": "<=",
              "value": "<="
            }
          ]
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "boolean",
            "selectVariable",
            "readSensor"
          ],
          "name": "73a0b2d5-9e62-4ccd-92ca-6a3493dfc072"
        },
        {
          "alias": "text",
          "value": "bloq-if-exec"
        }
      ]
    ],
    "suggestedBloqs": [
      "else",
      "elseif"
    ],
    "code": "if({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}",
    "arduino": {
      "code": "if({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "if({ARG1} {OPERATOR} {ARG2}):"
        },
        {
          "indentation": 1,
          "code": "{STATEMENTS}"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "magicFor",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-magicfor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-magicfor-repeat"
        },
        {
          "id": "TIMES",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-magicfor-times"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "for(int bitbloqForCounter=0;bitbloqForCounter < {TIMES};bitbloqForCounter += 1){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"magicFor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "millis",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-millis",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-millis"
        }
      ]
    ],
    "code": "millis()",
    "arduino": {
      "code": "millis()"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"millis\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "switch",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top",
        "acceptedAliases": [
          "switchChildren"
        ]
      }
    ],
    "bloqClass": "bloq-switch",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-switch-check"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        }
      ]
    ],
    "autoChildCreation": "case",
    "code": "switch (int({VAR})) {{STATEMENTS}}",
    "arduino": {
      "code": "switch (int({VAR})) {{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"switch\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "wait",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-wait",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-wait-wait"
        },
        {
          "id": "TIME",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "alias": "text",
          "value": "bloq-wait-ms"
        }
      ]
    ],
    "code": "delay({TIME});",
    "arduino": {
      "code": "delay({TIME});"
    },
    "python": {
      "codeLines": [
        {
          "code": "time.sleep({TIME}/1000)"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "while",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "6e8bb9be-5c97-427d-8717-9207d83c1a5d"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "boolean",
          "selectVariable",
          "readSensor"
        ],
        "name": "219b2e1f-0b17-4a0e-bb16-637ed3481fcf"
      }
    ],
    "bloqClass": "bloq-while",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-while-while"
        },
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "readSensor"
          ],
          "name": "6e8bb9be-5c97-427d-8717-9207d83c1a5d"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "=",
              "value": "=="
            },
            {
              "label": "!=",
              "value": "!="
            },
            {
              "label": ">",
              "value": ">"
            },
            {
              "label": ">=",
              "value": ">="
            },
            {
              "label": "<",
              "value": "<"
            },
            {
              "label": "<=",
              "value": "<="
            }
          ]
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "boolean",
            "selectVariable",
            "readSensor"
          ],
          "name": "219b2e1f-0b17-4a0e-bb16-637ed3481fcf"
        },
        {
          "alias": "text",
          "value": "bloq-while-exec"
        }
      ]
    ],
    "code": "while ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}",
    "python": {
      "codeLines": [
        {
          "code": "while ({ARG1} {OPERATOR} {ARG2}):"
        },
        {
          "indentation": 1,
          "code": "{STATEMENTS}"
        }
      ]
    },
    "arduino": {
      "code": "while ({ARG1} {OPERATOR} {ARG2}){{STATEMENTS}}"
    }
  },
  {
    "type": "output",
    "name": "numConversion",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "beb86736-c718-4507-8c94-0d43d62cbeaa"
      }
    ],
    "bloqClass": "bloq-num-conversion",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-num-conversion"
        },
        {
          "bloqInputId": "NUMBER",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "beb86736-c718-4507-8c94-0d43d62cbeaa"
        },
        {
          "alias": "text",
          "value": "bloq-num-conversion-to"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-num-conversion-int",
              "value": "int"
            },
            {
              "label": "bloq-num-conversion-float",
              "value": "float"
            }
          ]
        }
      ]
    ],
    "code": "({TYPE}) {NUMBER}",
    "arduino": {
      "code": "({TYPE}) {NUMBER}"
    },
    "returnType": {
      "type": "fromDropdown",
      "idDropdown": "TYPE"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"numConversion\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "stringToInt",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "String"
        ],
        "name": "3edb7215-07c2-4783-ad5f-b37661e8737a"
      }
    ],
    "bloqClass": "bloq-string-to-int",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-string-to-int"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "String"
          ],
          "name": "3edb7215-07c2-4783-ad5f-b37661e8737a"
        }
      ]
    ],
    "code": "{VAR}.toInt()",
    "arduino": {
      "code": "{VAR}.toInt()"
    },
    "returnType": {
      "type": "simple",
      "value": "int"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"stringToInt\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "advancedEchidnaRGB",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "f5f1424a-688c-4019-9f08-86404de3c1c5"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "29ce6070-c201-41d7-bf74-3a549abb7b24"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "8d74b873-cdbc-41a1-9699-147597c74cae"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed"
        },
        {
          "alias": "text",
          "value": "with-the-color"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-red"
        },
        {
          "bloqInputId": "RED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "f5f1424a-688c-4019-9f08-86404de3c1c5"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-green"
        },
        {
          "bloqInputId": "GREEN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "29ce6070-c201-41d7-bf74-3a549abb7b24"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-blue"
        },
        {
          "bloqInputId": "BLUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "8d74b873-cdbc-41a1-9699-147597c74cae"
        }
      ]
    ],
    "arduino": {
      "code": "echidna.setRGBcolor({RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"advancedEchidnaRGB\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "echidnaBuzzerWithoutPause",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-ms"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-without-pause"
        }
      ]
    ],
    "arduino": {
      "code": "echidna.playTone({NOTE},{SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaBuzzerWithoutPause\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "echidnaBuzzer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-ms"
        }
      ]
    ],
    "arduino": {
      "code": "echidna.playTone({NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaBuzzer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "echidnaRGB",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-simple-color"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-rgbLed-simple-white",
              "value": "255,255,255"
            },
            {
              "label": "bloq-rgbLed-simple-yellow",
              "value": "255,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-orange",
              "value": "200,50,0"
            },
            {
              "label": "bloq-rgbLed-simple-red",
              "value": "255,0,0"
            },
            {
              "label": "bloq-rgbLed-simple-green",
              "value": "0,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-dark-green",
              "value": "0,60,102"
            },
            {
              "label": "bloq-rgbLed-simple-blue",
              "value": "40,40,255"
            },
            {
              "label": "bloq-rgbLed-simple-dark-blue",
              "value": "0,0,255"
            },
            {
              "label": "bloq-rgbLed-simple-pink",
              "value": "255,0,255"
            }
          ]
        }
      ]
    ],
    "arduino": {
      "code": "echidna.setRGBcolor({COLOR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaRGB\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "echidnaRGBFull",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed"
        },
        {
          "alias": "text",
          "value": "with-the-color"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-red"
        },
        {
          "id": "RED",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-green"
        },
        {
          "id": "GREEN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-blue"
        },
        {
          "id": "BLUE",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "arduino": {
      "code": "echidna.setRGBcolor({RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaRGBFull\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "echidnaRGBOff",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-rgbLed-off",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed-off"
        },
        {
          "alias": "text",
          "value": "from-echidna"
        }
      ]
    ],
    "code": "echidna.setRGBcolor(0,0,0);",
    "arduino": {
      "code": "echidna.setRGBcolor(0,0,0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaRGBOff\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "echidnaLeds",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "id": "ACTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-led-turnon",
              "value": "HIGH"
            },
            {
              "label": "bloq-led-turnoff",
              "value": "LOW"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-led-theLED"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-rgbLed-simple-red",
              "value": "2"
            },
            {
              "label": "amber",
              "value": "1"
            },
            {
              "label": "bloq-rgbLed-simple-green",
              "value": "0"
            }
          ]
        }
      ]
    ],
    "arduino": {
      "code": "echidna.setLed({COLOR},{ACTION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaLeds\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "echidnaReadAccelXY",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "read-accelerometer"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "X",
              "value": "X"
            },
            {
              "label": "Y",
              "value": "Y"
            }
          ]
        }
      ]
    ],
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "conditional": {
        "aliasId": "AXIS",
        "code": {
          "X": "echidna.readAccX()",
          "Y": "echidna.readAccY()"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaReadAccelXY\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "echidnaReadJoystickXY",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-read-mkb_joystick"
        },
        {
          "id": "OPTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "X",
              "value": "X"
            },
            {
              "label": "Y",
              "value": "Y"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-of-joystick"
        }
      ]
    ],
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "conditional": {
        "aliasId": "OPTION",
        "code": {
          "X": "echidna.readJoystickX()",
          "Y": "echidna.readJoystickY()"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaReadJoystickXY\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "echidnaReadSensor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-read-sensor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-read-read"
        },
        {
          "id": "SENSOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "echidna-button-1",
              "value": "readButton1"
            },
            {
              "label": "echidna-button-2",
              "value": "readButton2"
            },
            {
              "label": "echidna-ldrs",
              "value": "readLightSensor"
            },
            {
              "label": "echidna-joystick-button",
              "value": "readJoystickButton"
            }
          ]
        },
        {
          "alias": "text",
          "value": "from-echidna"
        }
      ]
    ],
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "echidna.{SENSOR}()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"echidnaReadSensor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "freakscarIfLight",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if"
        },
        {
          "id": "CONDITION1",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-ifthereisalotoflight-alot",
              "value": "robot.readLDRRight() > 250"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-low",
              "value": "robot.readLDRRight() <= 250  &&  robot.readLDRRight() > 10"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-operation-nodetect",
              "value": "robot.readLDRRight() < 10"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-freakscar-light-right"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-logic-operations-and",
              "value": "&&"
            },
            {
              "label": "bloq-logic-operations-or",
              "value": "||"
            }
          ]
        },
        {
          "id": "CONDITION2",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-ifthereisalotoflight-alot",
              "value": "robot.readLDRLeft() > 250"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-low",
              "value": "robot.readLDRLeft() <= 250  &&  robot.readLDRLeft() > 10"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-operation-nodetect",
              "value": "robot.readLDRLeft() < 10"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-freakscar-light-left"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "if({CONDITION1} {OPERATOR} {CONDITION2}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarIfLight\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "freakscarMoveSpeed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "3580fd0e-3655-4c19-b608-cf1ade9cbca6"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-forward",
              "value": "1"
            },
            {
              "label": "bloq-mbot-move-backward",
              "value": "2"
            },
            {
              "label": "bloq-mbot-move-turnright",
              "value": "3"
            },
            {
              "label": "bloq-mbot-move-turnleft",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "bloqInputId": "SPEED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "3580fd0e-3655-4c19-b608-cf1ade9cbca6"
        },
        {
          "alias": "text",
          "value": "(0-255)"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.move({MOVEMENT},{SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarMoveSpeed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "freakscarIfThereIsALotOfLight",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if"
        },
        {
          "id": "OPERATION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-ifthereisalotoflight-alot",
              "value": "+"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-low",
              "value": "-"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-operation-nodetect",
              "value": "*"
            }
          ]
        },
        {
          "alias": "text",
          "value": "with-the"
        },
        {
          "id": "LIGHTSENSOR",
          "alias": "dynamicDropdown",
          "options": "freakscar_integrated_lightsensor"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "conditional": {
        "aliasId": "OPERATION",
        "code": {
          "+": "if(¬{LIGHTSENSOR.readSensor} > 250){{STATEMENTS}}",
          "-": "if((¬{LIGHTSENSOR.readSensor} > 10) && (¬{LIGHTSENSOR.readSensor} <= 250)){{STATEMENTS}}",
          "*": "if(¬{LIGHTSENSOR.readSensor} <= 10){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarIfThereIsALotOfLight\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "freakscarCollision",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-freakscar-if-collision"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "if(robot.readEndStop() == LOW){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarCollision\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "freakscarIfDistance",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-if-distance"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-if-distance-less",
              "value": "<"
            },
            {
              "label": "bloq-evolution-if-distance-more",
              "value": ">"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-if-distance-than"
        },
        {
          "id": "DISTANCE",
          "alias": "numberInput",
          "value": 15
        },
        {
          "id": "MAGNITUDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "cm",
              "value": "cm"
            },
            {
              "label": "inches",
              "value": "inches"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "conditional": {
        "aliasId": "MAGNITUDE",
        "code": {
          "cm": "if(robot.readUSMeasuredDistanceCM() {OPERATOR} {DISTANCE}){{STATEMENTS}}",
          "inches": "if(robot.readUSMeasuredDistanceIN() {OPERATOR} {DISTANCE}){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarIfDistance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "freakscarIfLightGlobal",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-freakscar-if-light"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-logic-operations-more",
              "value": "robot.readLDRRight() > robot.readLDRLeft()"
            },
            {
              "label": "bloq-logic-operations-less",
              "value": "robot.readLDRRight() < robot.readLDRLeft()"
            },
            {
              "label": "bloq-logic-operations-equals",
              "value": "robot.readLDRRight() == robot.readLDRLeft()"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-freakscar-if-light-secondly"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "if({OPERATOR}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarIfLightGlobal\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "freakscarIfRemote",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if-button-pressed"
        },
        {
          "id": "BUTTON",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "key-on-off",
              "value": "'P'"
            },
            {
              "label": "menu",
              "value": "'M'"
            },
            {
              "label": "OK",
              "value": "'S'"
            },
            {
              "label": "+",
              "value": "'+'"
            },
            {
              "label": "-",
              "value": "'-'"
            },
            {
              "label": "key-return",
              "value": "'X'"
            },
            {
              "label": "key-arrow-up",
              "value": "'F'"
            },
            {
              "label": "key-arrow-down",
              "value": "'D'"
            },
            {
              "label": "key-arrow-right",
              "value": "'R'"
            },
            {
              "label": "key-arrow-left",
              "value": "'L'"
            },
            {
              "label": "0",
              "value": "'0'"
            },
            {
              "label": "1",
              "value": "'1'"
            },
            {
              "label": "2",
              "value": "'2'"
            },
            {
              "label": "3",
              "value": "'3'"
            },
            {
              "label": "4",
              "value": "'4'"
            },
            {
              "label": "5",
              "value": "'5'"
            },
            {
              "label": "6",
              "value": "'6'"
            },
            {
              "label": "7",
              "value": "'7'"
            },
            {
              "label": "8",
              "value": "'8'"
            },
            {
              "label": "9",
              "value": "'9'"
            }
          ]
        },
        {
          "alias": "text",
          "value": "in-remote"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqIRControl.h"
      ],
      "code": "if(robot.getInfraredControlCommand() == {BUTTON}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarIfRemote\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "freakscarMove",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-forward",
              "value": "1"
            },
            {
              "label": "bloq-mbot-move-backward",
              "value": "2"
            },
            {
              "label": "bloq-mbot-move-turnright",
              "value": "3"
            },
            {
              "label": "bloq-mbot-move-turnleft",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-speed-fast",
              "value": "250"
            },
            {
              "label": "bloq-mbot-move-speed-normal",
              "value": "150"
            },
            {
              "label": "bloq-mbot-move-speed-slow",
              "value": "80"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqDCMotor.h"
      ],
      "code": "robot.move({MOVEMENT},{SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarMove\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "freakscarIfThereIsALotOfLightGlobal",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-freakscar-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if"
        },
        {
          "id": "OPERATION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-ifthereisalotoflight-alot",
              "value": "+"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-low",
              "value": "-"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-operation-nodetect",
              "value": "*"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "conditional": {
        "aliasId": "OPERATION",
        "code": {
          "+": "if(((robot.readLDRRight() + robot.readLDRLeft())/2) > 250){{STATEMENTS}}",
          "-": "if(((robot.readLDRRight() + robot.readLDRLeft())/2) > 10 && ((robot.readLDRRight() + robot.readLDRLeft())/2) <= 250){{STATEMENTS}}",
          "*": "if(((robot.readLDRRight() + robot.readLDRLeft())/2) <= 10){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarIfThereIsALotOfLightGlobal\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "freakscarBuzzer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-ms"
        }
      ]
    ],
    "code": "robot.playTone({NOTE},{SECONDS});",
    "arduino": {
      "code": "robot.playTone({NOTE},{SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarBuzzer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "freakscarDistance",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-freakscar-distance"
        },
        {
          "id": "MAGNITUDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "cm",
              "value": "cm"
            },
            {
              "label": "inches",
              "value": "inches"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "conditional": {
        "aliasId": "MAGNITUDE",
        "code": {
          "cm": "robot.readUSMeasuredDistanceCM()",
          "inches": "robot.readUSMeasuredDistanceIN()"
        }
      }
    },
    "returnType": {
      "type": "simple",
      "value": "int"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarDistance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "freakscarLight",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-light"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-light-left",
              "value": "LEFT"
            },
            {
              "label": "bloq-evolution-light-right",
              "value": "RIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-light-evolution"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqFreaksCar.h"
      ],
      "needInstanceOf": [
        {
          "name": "robot",
          "type": "BitbloqFreaksCar"
        }
      ],
      "setupExtraCode": "robot.setup();",
      "conditional": {
        "aliasId": "SIDE",
        "code": {
          "LEFT": "robot.readLDRLeft()",
          "RIGHT": "robot.readLDRRight()"
        }
      }
    },
    "returnType": {
      "type": "simple",
      "value": "int"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"freakscarLight\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "evolutionDistance",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-evolution-distance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-distance"
        }
      ]
    ],
    "code": "evolution.getDistance()",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "evolution.getDistance()"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionDistance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "evolutionHeadAdvance",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "75161be6-77c9-44cc-87d5-ec2c93426d03"
      }
    ],
    "bloqClass": "bloq-evolution-head",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-head-advance"
        },
        {
          "bloqInputId": "DEGREES",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "75161be6-77c9-44cc-87d5-ec2c93426d03"
        },
        {
          "alias": "text",
          "value": "bloq-evolution-head-advance-deg"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-head-advance-left",
              "value": "HEAD_LEFT"
            },
            {
              "label": "bloq-evolution-head-advance-right",
              "value": "HEAD_RIGHT"
            }
          ]
        }
      ]
    ],
    "code": "'{SIDE}' === 'HEAD_LEFT'? 'evolution.turnHead({DEGREES});' : 'evolution.turnHead(-{DEGREES});'",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "conditional": {
        "aliasId": "SIDE",
        "code": {
          "HEAD_LEFT": "evolution.turnHead({DEGREES});",
          "HEAD_RIGHT": "evolution.turnHead(-{DEGREES});"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionHeadAdvance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "evolutionLight",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-evolution-light",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-light"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-light-left",
              "value": "LEFT"
            },
            {
              "label": "bloq-evolution-light-right",
              "value": "RIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-light-evolution"
        }
      ]
    ],
    "code": "evolution.getLight({SIDE})",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "evolution.getLight({SIDE})"
    },
    "returnType": {
      "type": "simple",
      "value": "int"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionLight\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "evolutionLine",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-evolution-line",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-line"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-line-left",
              "value": "LEFT"
            },
            {
              "label": "bloq-evolution-line-right",
              "value": "RIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-line-evolution"
        }
      ]
    ],
    "code": "evolution.getLine({SIDE})",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "evolution.getLine({SIDE})"
    },
    "returnType": {
      "type": "simple",
      "value": "int"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionLine\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "evolutionBuzzer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-evolution-buzzer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-buzzer-do",
              "value": "note_C4"
            },
            {
              "label": "bloq-evolution-buzzer-re",
              "value": "note_D4"
            },
            {
              "label": "bloq-evolution-buzzer-mi",
              "value": "note_E4"
            },
            {
              "label": "bloq-evolution-buzzer-fa",
              "value": "note_F4"
            },
            {
              "label": "bloq-evolution-buzzer-sol",
              "value": "note_G4"
            },
            {
              "label": "bloq-evolution-buzzer-la",
              "value": "note_A4"
            },
            {
              "label": "bloq-evolution-buzzer-si",
              "value": "note_B4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 1000
        },
        {
          "alias": "text",
          "value": "bloq-evolution-buzzer-ms"
        }
      ]
    ],
    "code": "evolution._tone({NOTE},{SECONDS});",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "evolution._tone({NOTE},{SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionBuzzer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "evolutionHead",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-evolution-head",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-head"
        },
        {
          "id": "SIDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-head-center",
              "value": "HEAD_CENTER"
            },
            {
              "label": "bloq-evolution-head-left",
              "value": "HEAD_LEFT"
            },
            {
              "label": "bloq-evolution-head-right",
              "value": "HEAD_RIGHT"
            }
          ]
        }
      ]
    ],
    "code": "evolution.turnHead({SIDE});",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "evolution.turnHead({SIDE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionHead\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "evolutionHome",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-evolution-rest",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-rest"
        }
      ]
    ],
    "code": "evolution.home();",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "evolution.home();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionHome\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "evolutionIfDistance",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-evolution-if-distance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-if-distance"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-if-distance-less",
              "value": "<"
            },
            {
              "label": "bloq-evolution-if-distance-more",
              "value": ">"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-if-distance-than"
        },
        {
          "id": "DISTANCE",
          "alias": "numberInput",
          "value": 15
        },
        {
          "alias": "text",
          "value": "bloq-evolution-if-distance-then"
        }
      ]
    ],
    "code": "if(evolution.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "if(evolution.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionIfDistance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "evolutionIfLight",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-evolution-if-light",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-if-light"
        },
        {
          "id": "RANGELEFT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-if-light-high",
              "value": "HIGH_LIGHT"
            },
            {
              "label": "bloq-evolution-if-light-medium",
              "value": "MEDIUM_LIGHT"
            },
            {
              "label": "bloq-evolution-if-light-low",
              "value": "LOW_LIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-if-light-and"
        },
        {
          "id": "RANGERIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-if-light-high",
              "value": "HIGH_LIGHT"
            },
            {
              "label": "bloq-evolution-if-light-medium",
              "value": "MEDIUM_LIGHT"
            },
            {
              "label": "bloq-evolution-if-light-low",
              "value": "LOW_LIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-if-light-then"
        }
      ]
    ],
    "code": "if(evolution.getLightRange(LEFT,{RANGELEFT}) && evolution.getLightRange(RIGHT,{RANGERIGHT})){{STATEMENTS}}",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "if(evolution.getLightRange(LEFT,{RANGELEFT}) && evolution.getLightRange(RIGHT,{RANGERIGHT})){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionIfLight\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "evolutionIfLine",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-evolution-if-line",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-if-line"
        },
        {
          "id": "LINELEFT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-if-line-white",
              "value": "1"
            },
            {
              "label": "bloq-evolution-if-line-black",
              "value": "0"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-if-line-and"
        },
        {
          "id": "LINERIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-if-line-white",
              "value": "1"
            },
            {
              "label": "bloq-evolution-if-line-black",
              "value": "0"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-evolution-if-line-then"
        }
      ]
    ],
    "code": "if(evolution.getLine(LEFT) == {LINELEFT} && evolution.getLine(RIGHT) == {LINERIGHT}){{STATEMENTS}}",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "if(evolution.getLine(LEFT) == {LINELEFT} && evolution.getLine(RIGHT) == {LINERIGHT}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionIfLine\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "evolutionMovementsSimple",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-evolution-movements-simple",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-evolution-movements-simple"
        },
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-evolution-movements-simple-fordward",
              "value": "fordward"
            },
            {
              "label": "bloq-evolution-movements-simple-backward",
              "value": "backward"
            },
            {
              "label": "bloq-evolution-movements-simple-right",
              "value": "right"
            },
            {
              "label": "bloq-evolution-movements-simple-left",
              "value": "left"
            }
          ]
        }
      ]
    ],
    "code": "evolution.{MOVEMENT}();",
    "arduino": {
      "includes": [
        "BitbloqEvolution.h",
        "BitbloqUS.h",
        "Servo.h",
        "BitbloqOscillator.h"
      ],
      "needInstanceOf": [
        {
          "name": "evolution",
          "type": "Evolution"
        }
      ],
      "setupExtraCode": "evolution.init();",
      "code": "evolution.{MOVEMENT}();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"evolutionMovementsSimple\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "argument",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-argument",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-argument-var"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-argument-int",
              "value": "int"
            },
            {
              "label": "bloq-argument-float",
              "value": "float"
            },
            {
              "label": "bloq-argument-string",
              "value": "String"
            },
            {
              "label": "bloq-argument-char",
              "value": "char"
            },
            {
              "label": "bloq-argument-bool",
              "value": "bool"
            }
          ]
        },
        {
          "id": "VARNAME",
          "alias": "varInput",
          "value": ""
        }
      ]
    ],
    "createDynamicContent": "softwareVars",
    "code": "{TYPE} {VARNAME}",
    "returnType": {
      "type": "fromDropdown",
      "idDropdown": "TYPE",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "{TYPE} {VARNAME}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"argument\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "arguments",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "39dbdd79-09b6-4df0-91b3-00876aadd44a"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "91c4dacd-d900-4d34-b768-5a7ad6fc7bbc"
      }
    ],
    "bloqClass": "bloq-arguments",
    "content": [
      [
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "argument",
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "39dbdd79-09b6-4df0-91b3-00876aadd44a"
        },
        {
          "alias": "text",
          "value": ","
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "argument",
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "91c4dacd-d900-4d34-b768-5a7ad6fc7bbc"
        }
      ]
    ],
    "createDynamicContent": "softwareVars",
    "code": "{ARG1},{ARG2}",
    "returnType": {
      "type": "simple",
      "value": "var"
    },
    "arduino": {
      "code": "{ARG1},{ARG2}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"arguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "invokeFunctionWithArguments",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "arguments"
        ],
        "name": "6fd158c2-d023-45b0-b66f-08c84744fd71"
      }
    ],
    "bloqClass": "bloq-invoke-function-with-arguments",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-function-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "voidFunctions"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-function-args"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "arguments"
          ],
          "name": "6fd158c2-d023-45b0-b66f-08c84744fd71"
        }
      ]
    ],
    "code": "{FUNCTION}({ARGS});",
    "dynamicDropdown": {
      "idDropdown": "FUNCTION",
      "options": "voidFunctions"
    },
    "arduino": {
      "code": "{FUNCTION}({ARGS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeFunctionWithArguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "invokeReturnFunctionWithArguments",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "arguments"
        ],
        "name": "5c7ca728-6052-499c-a587-a2e0d9733b0e"
      }
    ],
    "bloqClass": "bloq-invoke-return-function-with-arguments",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-return-function-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "returnFunctions"
        },
        {
          "alias": "text",
          "value": "bloq-invoke-function-args"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "arguments"
          ],
          "name": "5c7ca728-6052-499c-a587-a2e0d9733b0e"
        }
      ]
    ],
    "code": "{FUNCTION}({ARGS})",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "FUNCTION",
      "options": "returnFunctions"
    },
    "arduino": {
      "code": "{FUNCTION}({ARGS})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"invokeReturnFunctionWithArguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "return",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "logicOperations",
          "equalityOperations"
        ],
        "name": "e71e2777-f417-4d3f-b879-8f48b6f72eb5"
      }
    ],
    "bloqClass": "bloq-return",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-return-return"
        },
        {
          "bloqInputId": "RETURN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable",
            "logicOperations",
            "equalityOperations"
          ],
          "name": "e71e2777-f417-4d3f-b879-8f48b6f72eb5"
        }
      ]
    ],
    "code": "return {RETURN};",
    "arduino": {
      "code": "return {RETURN};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"return\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "returnFunctionWithArguments",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "f9aa7045-85e2-48f8-8d85-f75f04716ed2"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "logicOperations",
          "equalityOperations"
        ],
        "name": "025041b4-2a91-43d1-83c4-b559cb9799e7"
      }
    ],
    "bloqClass": "bloq-return-function-with-arguments",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-return-function-with-arguments-declare"
        },
        {
          "id": "FUNCNAME",
          "alias": "varInput",
          "placeholder": "bloq-functions-default"
        },
        {
          "alias": "text",
          "value": "bloq-return-function-with-arguments-count"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "argument",
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "f9aa7045-85e2-48f8-8d85-f75f04716ed2"
        },
        {
          "position": "DOWN",
          "alias": "text",
          "value": "bloq-return-function-with-arguments-return"
        },
        {
          "position": "DOWN",
          "bloqInputId": "RETURN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable",
            "logicOperations",
            "equalityOperations"
          ],
          "name": "025041b4-2a91-43d1-83c4-b559cb9799e7"
        }
      ]
    ],
    "createDynamicContent": "returnFunctions",
    "returnType": {
      "type": "fromInput",
      "bloqInputId": "RETURN"
    },
    "code": "{RETURN.connectionType} {FUNCNAME} ({ARGS}) {{STATEMENTS}return {RETURN};}",
    "arduino": {
      "code": "@{RETURN.returnType} {FUNCNAME} ({ARGS}) {{STATEMENTS}return {RETURN};}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"returnFunctionWithArguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "voidFunctionWithArguments",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "argument",
          "arguments",
          "number",
          "string",
          "selectVariable"
        ],
        "name": "fe6479f2-a6ea-4d9f-8fec-7a39eb2b0cb0"
      }
    ],
    "bloqClass": "bloq-void-function-with-arguments",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-void-function-with-arguments-declare"
        },
        {
          "id": "FUNCNAME",
          "alias": "varInput",
          "placeholder": "bloq-functions-default"
        },
        {
          "alias": "text",
          "value": "bloq-void-function-with-arguments-count"
        },
        {
          "bloqInputId": "ARGS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "argument",
            "arguments",
            "number",
            "string",
            "selectVariable"
          ],
          "name": "fe6479f2-a6ea-4d9f-8fec-7a39eb2b0cb0"
        }
      ]
    ],
    "createDynamicContent": "voidFunctions",
    "returnType": {
      "type": "simple",
      "value": "void"
    },
    "code": "void {FUNCNAME} ({ARGS}){{STATEMENTS}}",
    "arduino": {
      "code": "void {FUNCNAME} ({ARGS}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"voidFunctionWithArguments\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "invokeFunction",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-invoke-function",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-function-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "voidFunctions"
        }
      ]
    ],
    "code": "{FUNCTION}();",
    "dynamicDropdown": {
      "idDropdown": "FUNCTION",
      "options": "voidFunctions"
    },
    "python": {
      "codeLines": [
        {
          "code": "{FUNCTION}()"
        }
      ]
    },
    "arduino": {
      "code": "{FUNCTION}();"
    }
  },
  {
    "type": "output",
    "name": "invokeReturnFunction",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-invoke-return-function",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-invoke-return-function-exec"
        },
        {
          "id": "FUNCTION",
          "alias": "dynamicDropdown",
          "options": "returnFunctions"
        }
      ]
    ],
    "code": "{FUNCTION}()",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "FUNCTION",
      "options": "returnFunctions"
    },
    "python": {
      "codeLines": [
        {
          "code": "{FUNCTION}()"
        }
      ]
    },
    "arduino": {
      "code": "{FUNCTION}()"
    }
  },
  {
    "type": "statement-input",
    "name": "returnFunction",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "logicOperations",
          "equalityOperations"
        ],
        "name": "cd6d7b56-21af-49c7-8680-769286c0f633"
      }
    ],
    "bloqClass": "bloq-return-function",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-return-function-declare"
        },
        {
          "id": "FUNCNAME",
          "alias": "varInput",
          "placeholder": "bloq-functions-default"
        },
        {
          "position": "DOWN",
          "alias": "text",
          "value": "bloq-return-function-return"
        },
        {
          "position": "DOWN",
          "bloqInputId": "RETURN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable",
            "logicOperations",
            "equalityOperations"
          ],
          "name": "cd6d7b56-21af-49c7-8680-769286c0f633"
        }
      ]
    ],
    "createDynamicContent": "returnFunctions",
    "returnType": {
      "type": "fromInput",
      "bloqInputId": "RETURN"
    },
    "code": "{RETURN.connectionType} {FUNCNAME} () {{STATEMENTS}return {RETURN};}",
    "python": {
      "codeLines": [
        {
          "code": "def {FUNCNAME}():"
        },
        {
          "indentation": 1,
          "code": "{STATEMENTS}"
        },
        {
          "indentation": 1,
          "code": "return {RETURN}"
        }
      ]
    },
    "arduino": {
      "code": "@{RETURN.returnType} {FUNCNAME} () {{STATEMENTS}return {RETURN};}"
    }
  },
  {
    "type": "statement-input",
    "name": "voidFunction",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-void-function",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-void-function-declare"
        },
        {
          "id": "FUNCNAME",
          "alias": "varInput",
          "placeholder": "bloq-functions-default"
        }
      ]
    ],
    "createDynamicContent": "voidFunctions",
    "returnType": {
      "type": "simple",
      "value": "void"
    },
    "code": "void {FUNCNAME} (){{STATEMENTS}}",
    "python": {
      "codeLines": [
        {
          "code": "def {FUNCNAME}():"
        },
        {
          "indentation": 1,
          "code": "{STATEMENTS}"
        }
      ]
    },
    "arduino": {
      "code": "void {FUNCNAME} (){{STATEMENTS}}"
    }
  },
  {
    "name": "group",
    "type": "group",
    "connectors": [
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ]
  },
  {
    "type": "output",
    "name": "boolArrayAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "name": "e5b73fc7-b643-434a-8c08-98b752f1a9aa"
      }
    ],
    "bloqClass": "bloq-boolArray-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-boolArray-advanced-arraySize"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "name": "e5b73fc7-b643-434a-8c08-98b752f1a9aa"
        },
        {
          "alias": "text",
          "value": "bloq-boolArray-advanced-boolType"
        }
      ]
    ],
    "code": "(bool *)malloc({VALUE}*sizeof(bool))",
    "returnType": {
      "type": "simple",
      "value": "bool *"
    },
    "arduino": {
      "code": "(bool *)malloc({VALUE}*sizeof(bool))"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"boolArrayAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "boolArray",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-boolArray",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-boolArray-arraySize"
        },
        {
          "id": "VALUE",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-boolArray-boolType"
        }
      ]
    ],
    "code": "(bool *)malloc({VALUE}*sizeof(bool))",
    "returnType": {
      "type": "simple",
      "value": "bool *"
    },
    "arduino": {
      "code": "(bool *)malloc({VALUE}*sizeof(bool))"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"boolArray\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "boolean",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-boolean",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-boolean-true",
              "value": "true"
            },
            {
              "label": "bloq-boolean-false",
              "value": "false"
            }
          ]
        }
      ]
    ],
    "code": "{STATE}",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "{STATE}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"boolean\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "equalityOperations",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "7c5078ca-a1c6-4cb0-9fc0-e327410ce325"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable",
          "readSensor"
        ],
        "name": "20adeb69-ef0d-487c-a237-e44e7f38b45d"
      }
    ],
    "bloqClass": "bloq-equality-operations",
    "content": [
      [
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "readSensor"
          ],
          "name": "7c5078ca-a1c6-4cb0-9fc0-e327410ce325"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "=",
              "value": "=="
            },
            {
              "label": "!=",
              "value": "!="
            },
            {
              "label": ">",
              "value": ">"
            },
            {
              "label": ">=",
              "value": ">="
            },
            {
              "label": "<",
              "value": "<"
            },
            {
              "label": "<=",
              "value": "<="
            }
          ]
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable",
            "readSensor"
          ],
          "name": "20adeb69-ef0d-487c-a237-e44e7f38b45d"
        }
      ]
    ],
    "code": "({ARG1} {OPERATOR} {ARG2})",
    "arduino": {
      "code": "({ARG1} {OPERATOR} {ARG2})"
    },
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"equalityOperations\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "logicOperations",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "equalityOperations",
          "logicOperations"
        ],
        "name": "9141a97b-7d0e-4085-a53c-77485d12c33f"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable",
          "equalityOperations",
          "logicOperations"
        ],
        "name": "056298a4-f02f-4fd1-a8a1-7fb9888c8f51"
      }
    ],
    "bloqClass": "bloq-logic-operations",
    "content": [
      [
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable",
            "equalityOperations",
            "logicOperations"
          ],
          "name": "9141a97b-7d0e-4085-a53c-77485d12c33f"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-logic-operations-and",
              "value": "&&"
            },
            {
              "label": "bloq-logic-operations-or",
              "value": "||"
            }
          ]
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable",
            "equalityOperations",
            "logicOperations"
          ],
          "name": "056298a4-f02f-4fd1-a8a1-7fb9888c8f51"
        }
      ]
    ],
    "code": "({ARG1} {OPERATOR} {ARG2})",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "({ARG1} {OPERATOR} {ARG2})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"logicOperations\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "not",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "447dcfc3-0c7a-4c28-8e36-790eb6ba6110"
      }
    ],
    "bloqClass": "bloq-not",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-not-not"
        },
        {
          "bloqInputId": "CONDITION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable"
          ],
          "name": "447dcfc3-0c7a-4c28-8e36-790eb6ba6110"
        }
      ]
    ],
    "code": "!{CONDITION}",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "!{CONDITION}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"not\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "name": "loopBloq",
    "type": "group",
    "connectors": [
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-loop",
    "headerText": "bloq-loop-header",
    "descriptionText": "bloq-loop-description",
    "content": [],
    "code": "void loop(){{STATEMENTS}}",
    "arduino": {
      "code": "void loop(){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"loopBloq\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "name": "pythonBloq",
    "type": "group",
    "connectors": [
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-python",
    "headerText": "Python Code",
    "descriptionText": "Python code come here",
    "content": [],
    "python": {
      "codeLines": [
        {
          "code": "{STATEMENTS}"
        }
      ]
    }
  },
  {
    "name": "setupBloq",
    "type": "group",
    "connectors": [
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-setup",
    "headerText": "bloq-setup-header",
    "descriptionText": "bloq-setup-description",
    "content": [],
    "code": "void setup(){{STATEMENTS}}",
    "arduino": {
      "code": "void setup(){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"setupBloq\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "name": "varsBloq",
    "type": "group",
    "connectors": [
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--empty"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-vars",
    "headerText": "bloq-var-header",
    "descriptionText": "bloq-var-description",
    "content": [],
    "code": "{STATEMENTS}",
    "arduino": {
      "code": "{STATEMENTS}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"varsBloq\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbSetExternalRGBLedAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b4376d2d-b40f-4d26-b784-81991311cc72"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "cc6e8e2c-9fb7-40f7-9dbe-aa4e20e7ae8e"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "33ea9643-5d58-485e-a535-6467c81399b0"
      }
    ],
    "bloqClass": "bloq-mbot-setrgbLed",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-led-turnon"
        },
        {
          "id": "LED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "todos los leds",
              "value": "0"
            },
            {
              "label": "el led 1",
              "value": "1"
            },
            {
              "label": "el led 2",
              "value": "2"
            },
            {
              "label": "el led 3",
              "value": "3"
            },
            {
              "label": "el led 4",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-red"
        },
        {
          "bloqInputId": "RED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b4376d2d-b40f-4d26-b784-81991311cc72"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-green"
        },
        {
          "bloqInputId": "GREEN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "cc6e8e2c-9fb7-40f7-9dbe-aa4e20e7ae8e"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-blue"
        },
        {
          "bloqInputId": "BLUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "33ea9643-5d58-485e-a535-6467c81399b0"
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "RGBLED",
          "alias": "dynamicDropdown",
          "options": "mkb_RGBLed"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{RGBLED}.showColor({LED},{RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbSetExternalRGBLedAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbSetExternalRGBLedAdvancedFull",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1d0210b8-1a0b-494d-b4c1-d5144c2cac72"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "3890ffb6-93ca-4948-abbe-46c164cce20c"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "f81c94df-f507-4399-8c98-144ff71b03e9"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "3a88dfc4-4465-4b1f-87c9-e5b4abd7203a"
      }
    ],
    "bloqClass": "bloq-mbot-setrgbLed",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed"
        },
        {
          "bloqInputId": "LED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "1d0210b8-1a0b-494d-b4c1-d5144c2cac72"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-red"
        },
        {
          "bloqInputId": "RED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "3890ffb6-93ca-4948-abbe-46c164cce20c"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-green"
        },
        {
          "bloqInputId": "GREEN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "f81c94df-f507-4399-8c98-144ff71b03e9"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-blue"
        },
        {
          "bloqInputId": "BLUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "3a88dfc4-4465-4b1f-87c9-e5b4abd7203a"
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "RGBLED",
          "alias": "dynamicDropdown",
          "options": "mkb_RGBLed"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{RGBLED}.showColor({LED},{RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbSetExternalRGBLedAdvancedFull\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbSetExternalRGBLedSimple",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-setrgbLed-simple",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-led-turnon"
        },
        {
          "id": "LED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "todos los leds",
              "value": "0"
            },
            {
              "label": "el led 1",
              "value": "1"
            },
            {
              "label": "el led 2",
              "value": "2"
            },
            {
              "label": "el led 3",
              "value": "3"
            },
            {
              "label": "el led 4",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-simple-color"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-rgbLed-simple-white",
              "value": "255,255,255"
            },
            {
              "label": "bloq-rgbLed-simple-yellow",
              "value": "255,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-orange",
              "value": "200,50,0"
            },
            {
              "label": "bloq-rgbLed-simple-red",
              "value": "255,0,0"
            },
            {
              "label": "bloq-rgbLed-simple-green",
              "value": "0,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-dark-green",
              "value": "0,61,4"
            },
            {
              "label": "bloq-rgbLed-simple-blue",
              "value": "40,40,255"
            },
            {
              "label": "bloq-rgbLed-simple-dark-blue",
              "value": "0,0,255"
            },
            {
              "label": "bloq-rgbLed-simple-pink",
              "value": "255,0,255"
            }
          ]
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "RGBLED",
          "alias": "dynamicDropdown",
          "options": "mkb_RGBLed"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{RGBLED}.showColor({LED},{COLOR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbSetExternalRGBLedSimple\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbSetExternalRGBLedOff",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-rgbLedsimple-off",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-turnoffled-off"
        },
        {
          "id": "LED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "todos los leds",
              "value": "0"
            },
            {
              "label": "el led 1",
              "value": "1"
            },
            {
              "label": "el led 2",
              "value": "2"
            },
            {
              "label": "el led 3",
              "value": "3"
            },
            {
              "label": "el led 4",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "RGBLED",
          "alias": "dynamicDropdown",
          "options": "mkb_RGBLed"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{RGBLED}.showColor({LED},0,0,0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbSetExternalRGBLedOff\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "makeblockIfMotion",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if"
        },
        {
          "id": "MOTIONSENSOR",
          "alias": "dynamicDropdown",
          "options": "mkb_motionSensor"
        },
        {
          "id": "OPERATION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-makeblock-ifmotion-detect",
              "value": "1"
            },
            {
              "label": "bloq-makeblock-ifmotion-nodetect",
              "value": "0"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "conditional": {
        "aliasId": "OPERATION",
        "code": {
          "0": "if(!¬{MOTIONSENSOR.readSensor}){{STATEMENTS}}",
          "1": "if(¬{MOTIONSENSOR.readSensor}){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"makeblockIfMotion\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "makeblockIfNoise",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if"
        },
        {
          "id": "OPERATION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-makeblock-ifnoise-alot",
              "value": "+"
            },
            {
              "label": "bloq-makeblock-ifnoise-low",
              "value": "-"
            },
            {
              "label": "bloq-makeblock-ifnoise-nodetect",
              "value": "*"
            }
          ]
        },
        {
          "alias": "text",
          "value": "with-the"
        },
        {
          "id": "SOUNDSENSOR",
          "alias": "dynamicDropdown",
          "options": "mkb_soundsensor"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "conditional": {
        "aliasId": "OPERATION",
        "code": {
          "+": "if(¬{SOUNDSENSOR.readSensor} > 360){{STATEMENTS}}",
          "-": "if((¬{SOUNDSENSOR.readSensor} > 115) && (¬{SOUNDSENSOR.readSensor} <= 360)){{STATEMENTS}}",
          "*": "if(¬{SOUNDSENSOR.readSensor} <= 115){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"makeblockIfNoise\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mkbReadMagneticField",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "Leer el campo magnético en el eje"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "X",
              "value": "X"
            },
            {
              "label": "Y",
              "value": "Y"
            },
            {
              "label": "Z",
              "value": "Z"
            }
          ]
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "COMPASS",
          "alias": "dynamicDropdown",
          "options": "mkb_compass"
        }
      ]
    ],
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "{COMPASS}.getHeading{AXIS}()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbReadMagneticField\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "setDisplayBrightness",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-7segment-setLight"
        },
        {
          "id": "DISPLAY",
          "alias": "dynamicDropdown",
          "options": "display7seg"
        },
        {
          "alias": "text",
          "value": "to"
        },
        {
          "id": "BRIGHTNESSLEVEL",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "0",
              "value": 0
            },
            {
              "label": "1",
              "value": 1
            },
            {
              "label": "2",
              "value": 2
            },
            {
              "label": "3",
              "value": 3
            },
            {
              "label": "4",
              "value": 4
            },
            {
              "label": "5",
              "value": 5
            },
            {
              "label": "6",
              "value": 6
            },
            {
              "label": "7",
              "value": 7
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{DISPLAY}.setBrightness({BRIGHTNESSLEVEL});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"setDisplayBrightness\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "setDisplayBrightnessAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "bad298bd-0ffe-457f-9a87-0500c3c549a3"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-7segment-setLight"
        },
        {
          "id": "DISPLAY",
          "alias": "dynamicDropdown",
          "options": "display7seg"
        },
        {
          "alias": "text",
          "value": "to"
        },
        {
          "bloqInputId": "BRIGHTNESSLEVEL",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "bad298bd-0ffe-457f-9a87-0500c3c549a3"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{DISPLAY}.setBrightness({BRIGHTNESSLEVEL});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"setDisplayBrightnessAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "clear7segment",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-7segment-clear"
        },
        {
          "id": "DISPLAY",
          "alias": "dynamicDropdown",
          "options": "display7seg"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{DISPLAY}.clearDisplay();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"clear7segment\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "displayNumber",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "bf45e786-39c6-4198-8656-37d90b3a54bf"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-display-show"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "bf45e786-39c6-4198-8656-37d90b3a54bf"
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "DISPLAY",
          "alias": "dynamicDropdown",
          "options": "display7seg"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{DISPLAY}.display({VALUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"displayNumber\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "displayNumberInPosition",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "2a2724cb-7292-4564-b5d2-03524472d761"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-display-show"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "2a2724cb-7292-4564-b5d2-03524472d761"
        },
        {
          "alias": "text",
          "value": "in-position"
        },
        {
          "id": "POSITION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "0",
              "value": 0
            },
            {
              "label": "1",
              "value": 1
            },
            {
              "label": "2",
              "value": 2
            },
            {
              "label": "3",
              "value": 3
            }
          ]
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "DISPLAY",
          "alias": "dynamicDropdown",
          "options": "display7seg"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{DISPLAY}.display((uint8_t){POSITION},{VALUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"displayNumberInPosition\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbfan",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-led-turnon",
              "value": "-150"
            },
            {
              "label": "bloq-led-turnoff",
              "value": "-1"
            },
            {
              "label": "bloq-reverse",
              "value": "1"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-the"
        },
        {
          "id": "FAN",
          "alias": "dynamicDropdown",
          "options": "mkb_fan"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{FAN}.setSpeed({SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbfan\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "ifButtonPushed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if-button-pressed"
        },
        {
          "id": "BUTTON",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "1",
              "value": 1
            },
            {
              "label": "2",
              "value": 2
            },
            {
              "label": "3",
              "value": 3
            },
            {
              "label": "4",
              "value": 4
            }
          ]
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "BUTTONPAD",
          "alias": "dynamicDropdown",
          "options": "mkb_4buttonKeyPad"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "if(¬{BUTTONPAD.readSensor} == {BUTTON}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"ifButtonPushed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "mBotIfFollowLines",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-iffollowlines",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-iffollowlines-if"
        },
        {
          "id": "LINELEFT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "white",
              "value": 1
            },
            {
              "label": "black",
              "value": 0
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-iffollowlines-and"
        },
        {
          "id": "LINERIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "white",
              "value": 1
            },
            {
              "label": "black",
              "value": 0
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-iffollowlines-withsensor"
        },
        {
          "id": "LINEFOLLOWER",
          "alias": "dynamicDropdown",
          "options": "mkb_linefollower"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "if((digitalRead({LINEFOLLOWER}_1) == {LINELEFT}) && (digitalRead({LINEFOLLOWER}_2) == {LINERIGHT})){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotIfFollowLines\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbDrawLedMatrixAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5474017e-db00-4786-91c8-e2ab614f93d9"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "f9ea743c-228d-442a-9ba6-869edce2dc13"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-led-turnon",
              "value": true
            },
            {
              "label": "bloq-led-turnoff",
              "value": false
            }
          ]
        },
        {
          "alias": "text",
          "value": "el led en el punto x:"
        },
        {
          "bloqInputId": "COLUMN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "5474017e-db00-4786-91c8-e2ab614f93d9"
        },
        {
          "alias": "text",
          "value": "y:"
        },
        {
          "bloqInputId": "ROW",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "f9ea743c-228d-442a-9ba6-869edce2dc13"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.drawLed({COLUMN},{ROW}, {STATE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbDrawLedMatrixAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbDrawLineAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "2fd2dec0-8871-4ffb-853e-b730e54841d0"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "db925bda-35b0-4326-bf17-744e9fe972f6"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "08374f58-e039-45d6-abed-d9951dbdec4e"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "e635efeb-acb2-4de7-a9ea-56e1e484d597"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "Dibujar línea desde x1:"
        },
        {
          "bloqInputId": "COLUMN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "2fd2dec0-8871-4ffb-853e-b730e54841d0"
        },
        {
          "alias": "text",
          "value": "y1:"
        },
        {
          "bloqInputId": "ROW",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "db925bda-35b0-4326-bf17-744e9fe972f6"
        },
        {
          "alias": "text",
          "value": "hasta x2:"
        },
        {
          "bloqInputId": "COLUMNF",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "08374f58-e039-45d6-abed-d9951dbdec4e"
        },
        {
          "alias": "text",
          "value": "y2:"
        },
        {
          "bloqInputId": "ROWF",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "e635efeb-acb2-4de7-a9ea-56e1e484d597"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.drawLine({COLUMN},{ROW},{COLUMNF},{ROWF});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbDrawLineAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbDrawRectangleAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "8b23ba54-c6b5-4835-b3c9-75873f4617de"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "40a9cd35-472d-4abd-ade7-18fa15b87acc"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "8f73e5a7-200b-4e1a-b88d-1f03bdb480ff"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "295617fa-526c-444a-8f11-adf3b27c1838"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "Dibujar rectángulo con origen x:"
        },
        {
          "bloqInputId": "COLUMN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "8b23ba54-c6b5-4835-b3c9-75873f4617de"
        },
        {
          "alias": "text",
          "value": "y:"
        },
        {
          "bloqInputId": "ROW",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "40a9cd35-472d-4abd-ade7-18fa15b87acc"
        },
        {
          "alias": "text",
          "value": "ancho:"
        },
        {
          "bloqInputId": "WIDTH",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "8f73e5a7-200b-4e1a-b88d-1f03bdb480ff"
        },
        {
          "alias": "text",
          "value": "alto:"
        },
        {
          "bloqInputId": "HEIGHT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "295617fa-526c-444a-8f11-adf3b27c1838"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.drawRectangle({COLUMN},{ROW},{WIDTH},{HEIGHT});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbDrawRectangleAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetLedMatrixBrightness",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-setLight"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        },
        {
          "alias": "text",
          "value": "to"
        },
        {
          "id": "BRIGHTNESSLEVEL",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "0",
              "value": 0
            },
            {
              "label": "1",
              "value": 1
            },
            {
              "label": "2",
              "value": 2
            },
            {
              "label": "3",
              "value": 3
            },
            {
              "label": "4",
              "value": 4
            },
            {
              "label": "5",
              "value": 5
            },
            {
              "label": "6",
              "value": 6
            },
            {
              "label": "7",
              "value": 7
            },
            {
              "label": "8",
              "value": 8
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.setBrightness({BRIGHTNESSLEVEL});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetLedMatrixBrightness\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetLedMatrixBrightnessAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1cfad569-0a01-4248-aad4-a32788397d01"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-setLight"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        },
        {
          "alias": "text",
          "value": "to"
        },
        {
          "bloqInputId": "BRIGHTNESSLEVEL",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "1cfad569-0a01-4248-aad4-a32788397d01"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.setBrightness({BRIGHTNESSLEVEL});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetLedMatrixBrightnessAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowNumberOnLedMatrixAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "fe294283-07e4-4599-802a-5d6333ae5820"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-writeNumber"
        },
        {
          "bloqInputId": "NUMBER",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "fe294283-07e4-4599-802a-5d6333ae5820"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.showNum({NUMBER});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowNumberOnLedMatrixAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowStringOnLedMatrixAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "f04b399f-7cb4-4ba0-97b5-b073d286e8e7"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-write"
        },
        {
          "bloqInputId": "TEXT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "selectVariable"
          ],
          "name": "f04b399f-7cb4-4ba0-97b5-b073d286e8e7"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.drawStr(0,7,{TEXT});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowStringOnLedMatrixAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowTimeOnLedMatrixAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "f477feb5-d8e7-4b2c-bbed-61e28ec568a5"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "fe6b7f01-f4d8-4d1b-bf37-b0755cf4a14b"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-writeTime"
        },
        {
          "bloqInputId": "HOUR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "f477feb5-d8e7-4b2c-bbed-61e28ec568a5"
        },
        {
          "alias": "text",
          "value": ":"
        },
        {
          "bloqInputId": "MINUTES",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "fe6b7f01-f4d8-4d1b-bf37-b0755cf4a14b"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.showClock({HOUR},{MINUTES},1);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowTimeOnLedMatrixAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotLedMatrix",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-draw"
        },
        {
          "id": "DRAW",
          "alias": "dotsMatrix",
          "options": {
            "rows": 8,
            "columns": 16
          },
          "value": "0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.draw({DRAW});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotLedMatrix\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotClearLedMatrix",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-clear"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.clearScreen();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotClearLedMatrix\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbDrawLedMatrix",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "id": "STATE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-led-turnon",
              "value": true
            },
            {
              "label": "bloq-led-turnoff",
              "value": false
            }
          ]
        },
        {
          "alias": "text",
          "value": "el led en el punto x:"
        },
        {
          "id": "COLUMN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "y:"
        },
        {
          "id": "ROW",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.drawLed({COLUMN},{ROW}, {STATE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbDrawLedMatrix\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mkbShowFaceOnLedMatrix",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "show-face"
        },
        {
          "id": "GESTURE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "happy",
              "value": "0x0, 0x0, 0x40, 0x84, 0x82, 0x41, 0x1, 0x1, 0x1, 0x1, 0x41, 0x82, 0x84, 0x40, 0x0, 0x0"
            },
            {
              "label": "serious",
              "value": "0x0, 0x0, 0x0, 0x62, 0x64, 0x4, 0x4, 0x4, 0x4, 0x4, 0x4, 0x64, 0x62, 0x0, 0x0, 0x0"
            },
            {
              "label": "sad",
              "value": "0x0, 0x0, 0x80, 0x41, 0x42, 0x84, 0x4, 0x4, 0x4, 0x4, 0x84, 0x42, 0x41, 0x80, 0x0, 0x0"
            },
            {
              "label": "angry",
              "value": "0x0, 0x0, 0x0, 0x80, 0x41, 0x22, 0x2, 0x2, 0x2, 0x2, 0x22, 0x41, 0x80, 0x0, 0x0, 0x0"
            },
            {
              "label": "inlove",
              "value": "0x0, 0x30, 0x78, 0x3c, 0x78, 0x30, 0x2, 0x1, 0x1, 0x2, 0x30, 0x78, 0x3c, 0x78, 0x30, 0x0"
            },
            {
              "label": "confused",
              "value": "0x0, 0x0, 0x0, 0xc3, 0xc4, 0x4, 0x4, 0x4, 0x2, 0x1, 0x1, 0xc1, 0xc6, 0x0, 0x0, 0x0"
            }
          ]
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.draw({GESTURE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbShowFaceOnLedMatrix\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowNumberOnLedMatrix",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-writeNumber"
        },
        {
          "id": "NUMBER",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.showNum({NUMBER});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowNumberOnLedMatrix\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowStringOnLedMatrix",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-write"
        },
        {
          "id": "TEXT",
          "alias": "stringInput"
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.drawStr(0,7,\"{TEXT}\");"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowStringOnLedMatrix\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowTimeOnLedMatrix",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-ledmatrix-writeTime"
        },
        {
          "id": "HOUR",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": ":"
        },
        {
          "id": "MINUTES",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "in-the"
        },
        {
          "id": "LEDMATRIX",
          "alias": "dynamicDropdown",
          "options": "ledMatrix"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "{LEDMATRIX}.showClock({HOUR},{MINUTES},1);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowTimeOnLedMatrix\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mkbAccelerometer",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "Obtener ángulo del acelerómetro en el eje"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "X",
              "value": "X"
            },
            {
              "label": "Y",
              "value": "Y"
            },
            {
              "label": "Z",
              "value": "Z"
            }
          ]
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "robot.getAngle{AXIS}()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbAccelerometer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mkbGyroscope",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "Leer información del giroscopio en el eje"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "X",
              "value": "X"
            },
            {
              "label": "Y",
              "value": "Y"
            }
          ]
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "robot.getGyro{AXIS}()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbGyroscope\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mkbIntegratedSoundSensor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "Leer sensor de sonido integrado"
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "robot.readSoundLevel()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mkbIntegratedSoundSensor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "remoteButtonPushed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "if-button-pressed"
        },
        {
          "id": "BUTTON",
          "alias": "staticDropdown",
          "options": [
            {
              "value": "'A'",
              "label": "A"
            },
            {
              "value": "'B'",
              "label": "B"
            },
            {
              "value": "'C'",
              "label": "C"
            },
            {
              "value": "'D'",
              "label": "D"
            },
            {
              "value": "'E'",
              "label": "E"
            },
            {
              "value": "'F'",
              "label": "F"
            },
            {
              "value": "'S'",
              "label": "settings"
            },
            {
              "value": "'U'",
              "label": "key-arrow-up"
            },
            {
              "value": "'G'",
              "label": "key-arrow-down"
            },
            {
              "value": "'R'",
              "label": "key-arrow-right"
            },
            {
              "value": "'L'",
              "label": "key-arrow-left"
            },
            {
              "value": "'0'",
              "label": "0"
            },
            {
              "value": "'1'",
              "label": "1"
            },
            {
              "value": "'2'",
              "label": "2"
            },
            {
              "value": "'3'",
              "label": "3"
            },
            {
              "value": "'4'",
              "label": "4"
            },
            {
              "value": "'5'",
              "label": "5"
            },
            {
              "value": "'6'",
              "label": "6"
            },
            {
              "value": "'7'",
              "label": "7"
            },
            {
              "value": "'8'",
              "label": "8"
            },
            {
              "value": "'9'",
              "label": "9"
            }
          ]
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "REMOTE",
          "alias": "dynamicDropdown",
          "options": "remoteControl"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "if(¬{REMOTE.readSensor} == {BUTTON}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"remoteButtonPushed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "remoteButtonPushedCase",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "switchChildren",
          "case"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "case"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-remote-switch-case"
        },
        {
          "id": "REMOTEKEY",
          "alias": "staticDropdown",
          "options": [
            {
              "value": "'A'",
              "label": "A"
            },
            {
              "value": "'B'",
              "label": "B"
            },
            {
              "value": "'C'",
              "label": "C"
            },
            {
              "value": "'D'",
              "label": "D"
            },
            {
              "value": "'E'",
              "label": "E"
            },
            {
              "value": "'F'",
              "label": "F"
            },
            {
              "value": "'S'",
              "label": "settings"
            },
            {
              "value": "'U'",
              "label": "key-arrow-up"
            },
            {
              "value": "'G'",
              "label": "key-arrow-down"
            },
            {
              "value": "'R'",
              "label": "key-arrow-right"
            },
            {
              "value": "'L'",
              "label": "key-arrow-left"
            },
            {
              "value": "'0'",
              "label": "0"
            },
            {
              "value": "'1'",
              "label": "1"
            },
            {
              "value": "'2'",
              "label": "2"
            },
            {
              "value": "'3'",
              "label": "3"
            },
            {
              "value": "'4'",
              "label": "4"
            },
            {
              "value": "'5'",
              "label": "5"
            },
            {
              "value": "'6'",
              "label": "6"
            },
            {
              "value": "'7'",
              "label": "7"
            },
            {
              "value": "'8'",
              "label": "8"
            },
            {
              "value": "'9'",
              "label": "9"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "case {REMOTEKEY}:{STATEMENTS}break;"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"remoteButtonPushedCase\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "remoteButtonPushedCaseDefault",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom",
        "acceptedAliases": [
          "switchChildren",
          "case"
        ]
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-remote-switch-default"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "default:{STATEMENTS}break;"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"remoteButtonPushedCaseDefault\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "remoteButtonPushedSwitch",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top",
        "acceptedAliases": [
          "switchChildren"
        ]
      }
    ],
    "bloqClass": "bloq-mbot-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-makeblock-remote-switch"
        },
        {
          "id": "REMOTE",
          "alias": "dynamicDropdown",
          "options": "remoteControl"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "switch(¬{REMOTE.readSensor}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"remoteButtonPushedSwitch\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "robotSetMotorSpeed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-shield-DCmotor-spin"
        },
        {
          "id": "DIRECTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right-male",
              "value": "Right"
            },
            {
              "label": "left-male",
              "value": "Left"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "id": "SPEED",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "(-200,200)"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.set{DIRECTION}MotorSpeed({SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"robotSetMotorSpeed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "robotSetMotorSpeedAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "c861f68e-496f-43b4-b095-8fff2bd71006"
      }
    ],
    "bloqClass": "bloq-components-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-shield-DCmotor-spin"
        },
        {
          "id": "DIRECTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "right-male",
              "value": "Right"
            },
            {
              "label": "left-male",
              "value": "Left"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "bloqInputId": "SPEED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "c861f68e-496f-43b4-b095-8fff2bd71006"
        },
        {
          "alias": "text",
          "value": "(-200,200)"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.set{DIRECTION}MotorSpeed({SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"robotSetMotorSpeedAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "mBotSomethingNear",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-somethingnear",
    "content": [
      [
        {
          "alias": "text",
          "value": "if"
        },
        {
          "id": "OPERATION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-somethingnear-operation-near",
              "value": "{ULTRASOUND}.readDistanceInCM() < 8"
            },
            {
              "label": "bloq-mbot-somethingnear-operation-faraway",
              "value": "({ULTRASOUND}.readDistanceInCM() >= 8) && ({ULTRASOUND}.readDistanceInCM() < 513)"
            },
            {
              "label": "bloq-mbot-somethingnear-operation-nodetect",
              "value": "{ULTRASOUND}.readDistanceInCM() >= 513"
            }
          ]
        },
        {
          "alias": "text",
          "value": "with-the"
        },
        {
          "id": "ULTRASOUND",
          "alias": "dynamicDropdown",
          "options": "mkb_ultrasound"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "if({OPERATION}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSomethingNear\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "mBotIfThereIsALotOfLight",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-ifthereisalotoflight",
    "content": [
      [
        {
          "alias": "text",
          "value": "if"
        },
        {
          "id": "OPERATION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-ifthereisalotoflight-alot",
              "value": "+"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-low",
              "value": "-"
            },
            {
              "label": "bloq-mbot-ifthereisalotoflight-operation-nodetect",
              "value": "*"
            }
          ]
        },
        {
          "alias": "text",
          "value": "with-the"
        },
        {
          "id": "LIGHTSENSOR",
          "alias": "dynamicDropdown",
          "options": "mkb_lightsensor"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "conditional": {
        "aliasId": "OPERATION",
        "code": {
          "+": "if(¬{LIGHTSENSOR.readSensor} > 200){{STATEMENTS}}",
          "-": "if((¬{LIGHTSENSOR.readSensor} > 0) && (¬{LIGHTSENSOR.readSensor} <= 200)){{STATEMENTS}}",
          "*": "if(¬{LIGHTSENSOR.readSensor} <= 0){{STATEMENTS}}"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotIfThereIsALotOfLight\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowPrintText",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-printtext",
    "content": [
      [
        {
          "alias": "text",
          "value": "Escribir"
        },
        {
          "id": "TEXT",
          "alias": "stringInput",
          "defaultValue": "Hola"
        },
        {
          "alias": "text",
          "value": "en la pantalla conectada en el "
        },
        {
          "id": "PORT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "puerto 1",
              "value": "1"
            },
            {
              "label": "puerto 2",
              "value": "2"
            },
            {
              "label": "puerto 3",
              "value": "3"
            },
            {
              "label": "puerto 4",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "empezando en la posición (columna, fila)"
        },
        {
          "id": "COLUMN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "id": "ROW",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "mBot.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBot",
          "type": "MBot"
        }
      ],
      "code": "mBot.print({PORT}, {TEXT}, {COLUMN}, {ROW});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowPrintText\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetMotor",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-setmotor",
    "content": [
      [
        {
          "alias": "text",
          "value": "Fijar el motor "
        },
        {
          "id": "MOTOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "M1",
              "value": "M1"
            },
            {
              "label": "M2",
              "value": "M2"
            }
          ]
        },
        {
          "alias": "text",
          "value": "a una velocidad"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "muy muy rápida",
              "value": "255"
            },
            {
              "label": "muy rápida",
              "value": "100"
            },
            {
              "label": "rápida",
              "value": "50"
            },
            {
              "label": "nula",
              "value": "0"
            },
            {
              "label": "despacio",
              "value": "-50"
            },
            {
              "label": "muy despacio",
              "value": "-100"
            },
            {
              "label": "muy muy despacio",
              "value": "-255"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "mBot.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBot",
          "type": "MBot"
        }
      ],
      "code": "mBot.setMotor({MOTOR},{SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetMotor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetServo",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-setservo",
    "content": [
      [
        {
          "alias": "text",
          "value": "Fijar el servo en el"
        },
        {
          "id": "PORT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "puerto 1",
              "value": "1"
            },
            {
              "label": "puerto 2",
              "value": "2"
            },
            {
              "label": "puerto 3",
              "value": "3"
            },
            {
              "label": "puerto 4",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "y el"
        },
        {
          "id": "BANK",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "banco 1",
              "value": "1"
            },
            {
              "label": "banco 2",
              "value": "2"
            }
          ]
        },
        {
          "alias": "text",
          "value": "con un ángulo de "
        },
        {
          "id": "ANGLE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "0",
              "value": "0"
            },
            {
              "label": "45",
              "value": "45"
            },
            {
              "label": "90",
              "value": "90"
            },
            {
              "label": "135",
              "value": "135"
            },
            {
              "label": "180",
              "value": "180"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "mBot.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBot",
          "type": "MBot"
        }
      ],
      "code": "mBot.setServo({PORT}, {BANK}, {ANGLE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetServo\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotShowFaceByNumber",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-showfacebynumber",
    "content": [
      [
        {
          "alias": "text",
          "value": "Mostrar la cara número "
        },
        {
          "id": "FACE",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "en la pantalla conectada en el "
        },
        {
          "id": "PORT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "puerto 1",
              "value": "1"
            },
            {
              "label": "puerto 2",
              "value": "2"
            },
            {
              "label": "puerto 3",
              "value": "3"
            },
            {
              "label": "puerto 4",
              "value": "4"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "mBot.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBot",
          "type": "MBot"
        }
      ],
      "code": "mBot.showFaceByNumber({PORT},{FACE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotShowFaceByNumber\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotRGBLedOff",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-rgbLedsimple-off",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-turnoffled-off"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "mkb_integrated_RGB"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.setLed(º[{LED}.pin.s],0,0,0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotRGBLedOff\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetRGBLedAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5a97ded3-fba0-4633-8c51-6671337940f7"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5cf91314-d67c-4568-8bb0-ef596fda1d24"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "d9267f0e-e0b2-4311-a2ef-79428baf4615"
      }
    ],
    "bloqClass": "bloq-mbot-setrgbLed",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-led-turnon"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "mkb_integrated_RGB"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-red"
        },
        {
          "bloqInputId": "RED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "5a97ded3-fba0-4633-8c51-6671337940f7"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-green"
        },
        {
          "bloqInputId": "GREEN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "5cf91314-d67c-4568-8bb0-ef596fda1d24"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-blue"
        },
        {
          "bloqInputId": "BLUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "d9267f0e-e0b2-4311-a2ef-79428baf4615"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.setLed(º[{LED}.pin.s],{RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetRGBLedAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetRGBLedAdvancedFull",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "fdde8262-0dd7-49b9-a01d-2945b3afe993"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "16c6d8e8-91c3-4b7d-92fe-e9127c256218"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "769aaa1c-12a9-4b86-9980-14b02fd551e6"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "ea11e37c-2d44-40e0-8601-df3b2bdf66d1"
      }
    ],
    "bloqClass": "bloq-mbot-setrgbLed",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-rgbLed"
        },
        {
          "bloqInputId": "LED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "fdde8262-0dd7-49b9-a01d-2945b3afe993"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-red"
        },
        {
          "bloqInputId": "RED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "16c6d8e8-91c3-4b7d-92fe-e9127c256218"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-green"
        },
        {
          "bloqInputId": "GREEN",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "769aaa1c-12a9-4b86-9980-14b02fd551e6"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-blue"
        },
        {
          "bloqInputId": "BLUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "ea11e37c-2d44-40e0-8601-df3b2bdf66d1"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.setLed({LED},{RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetRGBLedAdvancedFull\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetRGBLed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-setrgbLed",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-led-turnon"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "mkb_integrated_RGB"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-red"
        },
        {
          "id": "RED",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-green"
        },
        {
          "id": "GREEN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-blue"
        },
        {
          "id": "BLUE",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.setLed(º[{LED}.pin.s],{RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetRGBLed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetRGBLedSimple",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-setrgbLed-simple",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-led-turnon"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "mkb_integrated_RGB"
        },
        {
          "alias": "text",
          "value": "bloq-rgbLed-simple-color"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-rgbLed-simple-white",
              "value": "255,255,255"
            },
            {
              "label": "bloq-rgbLed-simple-yellow",
              "value": "255,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-orange",
              "value": "200,50,0"
            },
            {
              "label": "bloq-rgbLed-simple-red",
              "value": "255,0,0"
            },
            {
              "label": "bloq-rgbLed-simple-green",
              "value": "0,255,0"
            },
            {
              "label": "bloq-rgbLed-simple-dark-green",
              "value": "0,61,4"
            },
            {
              "label": "bloq-rgbLed-simple-blue",
              "value": "40,40,255"
            },
            {
              "label": "bloq-rgbLed-simple-dark-blue",
              "value": "0,0,255"
            },
            {
              "label": "bloq-rgbLed-simple-pink",
              "value": "255,0,255"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.setLed(º[{LED}.pin.s],{COLOR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetRGBLedSimple\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotBuzzerAdvanced-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "0a4f53a1-d5a0-4b6f-a8f8-df4df3439e3b"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "4aa35b7e-505a-47cf-be65-0dd3cd55e991"
      }
    ],
    "bloqClass": "bloq-mbot-buzzer-v2",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-sound"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-note"
        },
        {
          "bloqInputId": "NOTE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "0a4f53a1-d5a0-4b6f-a8f8-df4df3439e3b"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-for"
        },
        {
          "bloqInputId": "SECONDS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "4aa35b7e-505a-47cf-be65-0dd3cd55e991"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-ms"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.playTone({NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotBuzzerAdvanced-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotMoveAdvanced-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "fb5c7086-a853-4dab-8ab2-2d63e46b0a00"
      }
    ],
    "bloqClass": "bloq-mbot-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-forward",
              "value": "1"
            },
            {
              "label": "bloq-mbot-move-backward",
              "value": "2"
            },
            {
              "label": "bloq-mbot-move-turnright",
              "value": "3"
            },
            {
              "label": "bloq-mbot-move-turnleft",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "bloqInputId": "SPEED",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "fb5c7086-a853-4dab-8ab2-2d63e46b0a00"
        },
        {
          "alias": "text",
          "value": "(0-255)"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.move({MOVEMENT},{SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotMoveAdvanced-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotBuzzer-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-buzzer-v2",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-sound"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-note"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-ms"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.playTone({NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotBuzzer-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mBotGetDistance-v2",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-mbot-getdistance-v2",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-getdistance"
        },
        {
          "id": "ULTRASOUND",
          "alias": "dynamicDropdown",
          "options": "mkb_ultrasound"
        },
        {
          "alias": "text",
          "value": "in"
        },
        {
          "id": "MAGNITUDE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "cm",
              "value": "cm"
            },
            {
              "label": "inches",
              "value": "inches"
            }
          ]
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "conditional": {
        "aliasId": "MAGNITUDE",
        "code": {
          "cm": "{ULTRASOUND}.readDistanceInCM()",
          "inches": "{ULTRASOUND}.readDistanceInInches()"
        }
      }
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotGetDistance-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotMove-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-forward",
              "value": "1"
            },
            {
              "label": "bloq-mbot-move-backward",
              "value": "2"
            },
            {
              "label": "bloq-mbot-move-turnright",
              "value": "3"
            },
            {
              "label": "bloq-mbot-move-turnleft",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-speed-fast",
              "value": "210"
            },
            {
              "label": "bloq-mbot-move-speed-normal",
              "value": "160"
            },
            {
              "label": "bloq-mbot-move-speed-slow",
              "value": "100"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.move({MOVEMENT},{SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotMove-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotStop-v2",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-stop"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "code": "robot.move(1,0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotStop-v2\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotBuzzerAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "c3dfc59e-7149-4590-99cc-ca83ce3350bf"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1b3eb274-bbd2-442a-bc86-1d4cc630c79e"
      }
    ],
    "bloqClass": "bloq-mbot-buzzer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-buzzer-advanced-play"
        },
        {
          "bloqInputId": "NOTE",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "c3dfc59e-7149-4590-99cc-ca83ce3350bf"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-buzzer-advanced-for"
        },
        {
          "bloqInputId": "SECONDS",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "1b3eb274-bbd2-442a-bc86-1d4cc630c79e"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-buzzer-advanced-ms"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "needInstanceOf": [
        {
          "name": "mBotBuzzerPin",
          "type": "const int",
          "equals": "8"
        }
      ],
      "code": "tone(mBotBuzzerPin,{NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotBuzzerAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotMoveAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "bd7682d4-b604-4ed2-b215-ccfc3cffe19b"
      }
    ],
    "bloqClass": "bloq-mbot-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-forward",
              "value": "1"
            },
            {
              "label": "bloq-mbot-move-backward",
              "value": "2"
            },
            {
              "label": "bloq-mbot-move-turnright",
              "value": "3"
            },
            {
              "label": "bloq-mbot-move-turnleft",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-advanced-speed"
        },
        {
          "bloqInputId": "SPEED",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "bd7682d4-b604-4ed2-b215-ccfc3cffe19b"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.move({MOVEMENT},{SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotMoveAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetLedAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "97f60668-d428-4e71-a480-d6cfba162008"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "fc28334f-e6e8-4738-89f2-a4a1dfd1b15e"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "17ddbd77-5cfd-4335-a560-163fb641496d"
      }
    ],
    "bloqClass": "bloq-mbot-setled",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-setled-advanced-set"
        },
        {
          "id": "LEDS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-led-all",
              "value": "0"
            },
            {
              "label": "bloq-mbot-led-right",
              "value": "1"
            },
            {
              "label": "bloq-mbot-led-left",
              "value": "2"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-advanced-colormix"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-advanced-red"
        },
        {
          "bloqInputId": "RED",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "97f60668-d428-4e71-a480-d6cfba162008"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-advanced-green"
        },
        {
          "bloqInputId": "GREEN",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "fc28334f-e6e8-4738-89f2-a4a1dfd1b15e"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-advanced-blue"
        },
        {
          "bloqInputId": "BLUE",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "17ddbd77-5cfd-4335-a560-163fb641496d"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.setLed({LEDS}, {RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetLedAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotBuzzer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-buzzer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-buzzer-note"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "alias": "text",
          "value": "bloq-mbot-buzzer-ms"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "needInstanceOf": [
        {
          "name": "mBotBuzzerPin",
          "type": "const int",
          "equals": "8"
        }
      ],
      "code": "tone(mBotBuzzerPin,{NOTE},{SECONDS});\ndelay({SECONDS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotBuzzer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mBotGetDistance",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-mbot-getdistance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-getdistance-get"
        },
        {
          "id": "PORT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-port-1",
              "value": "1"
            },
            {
              "label": "bloq-mbot-port-2",
              "value": "2"
            },
            {
              "label": "bloq-mbot-port-3",
              "value": "3"
            },
            {
              "label": "bloq-mbot-port-4",
              "value": "4"
            }
          ]
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.getDistance({PORT})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotGetDistance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mBotGetButtonStatus",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-mbot-getbuttonstatus",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-getbuttonstatus"
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.getButtonStatus()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotGetButtonStatus\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mBotGetLightSensor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-mbot-getlightsensor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-getlightsensor"
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.getLightSensor()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotGetLightSensor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mBotLineFollower",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-mbot-linefollower",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-linefollower-text"
        },
        {
          "id": "PORT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-port-1",
              "value": "1"
            },
            {
              "label": "bloq-mbot-port-2",
              "value": "2"
            },
            {
              "label": "bloq-mbot-port-3",
              "value": "3"
            },
            {
              "label": "bloq-mbot-port-4",
              "value": "4"
            }
          ]
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.getLineFollower({PORT})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotLineFollower\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotMove",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-move",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-forward",
              "value": "1"
            },
            {
              "label": "bloq-mbot-move-backward",
              "value": "2"
            },
            {
              "label": "bloq-mbot-move-turnright",
              "value": "3"
            },
            {
              "label": "bloq-mbot-move-turnleft",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-move-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-move-speed-fast",
              "value": "255"
            },
            {
              "label": "bloq-mbot-move-speed-normal",
              "value": "100"
            },
            {
              "label": "bloq-mbot-move-speed-slow",
              "value": "50"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.move({MOVEMENT},{SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotMove\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotSetLed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-setled",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-setled-set"
        },
        {
          "id": "LEDS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-led-all",
              "value": "0"
            },
            {
              "label": "bloq-mbot-led-right",
              "value": "1"
            },
            {
              "label": "bloq-mbot-led-left",
              "value": "2"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-colormix"
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-red"
        },
        {
          "id": "RED",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-green"
        },
        {
          "id": "GREEN",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "bloq-mbot-setled-blue"
        },
        {
          "id": "BLUE",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.setLed({LEDS}, {RED}, {GREEN}, {BLUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotSetLed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-stop"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.move(1,0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotStop\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "mBotTurnOffLed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-mbot-turnoffled",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-mbot-turnoffled-off"
        },
        {
          "id": "LEDS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-mbot-led-all",
              "value": "0"
            },
            {
              "label": "bloq-mbot-led-right",
              "value": "1"
            },
            {
              "label": "bloq-mbot-led-left",
              "value": "2"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqMBotDeprecated.h"
      ],
      "needInstanceOf": [
        {
          "name": "mBotv1",
          "type": "MBot"
        }
      ],
      "code": "mBotv1.setLed({LEDS}, 0, 0, 0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mBotTurnOffLed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mapAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "readSensor",
          "selectVariable"
        ],
        "name": "0891e884-6318-43ed-b090-529aa58f4fc0"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "8065f359-de64-4782-8a5c-0ed8dd829d0b"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "dccd6f14-57c0-4a62-87b3-793cedb51a3d"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "be15bf03-5a64-4402-86d9-12f5c1bef288"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "e6b83784-dc99-4816-bac4-e1d7116a3649"
      }
    ],
    "bloqClass": "bloq-map-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-map-advanced-map"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "readSensor",
            "selectVariable"
          ],
          "name": "0891e884-6318-43ed-b090-529aa58f4fc0"
        },
        {
          "alias": "text",
          "value": "bloq-map-advanced-value"
        },
        {
          "bloqInputId": "INITMIN",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "8065f359-de64-4782-8a5c-0ed8dd829d0b"
        },
        {
          "alias": "text",
          "value": "-"
        },
        {
          "bloqInputId": "INITMAX",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "dccd6f14-57c0-4a62-87b3-793cedb51a3d"
        },
        {
          "alias": "text",
          "value": "bloq-map-advanced-and"
        },
        {
          "bloqInputId": "FINMIN",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "be15bf03-5a64-4402-86d9-12f5c1bef288"
        },
        {
          "alias": "text",
          "value": "-"
        },
        {
          "bloqInputId": "FINMAX",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "e6b83784-dc99-4816-bac4-e1d7116a3649"
        },
        {
          "alias": "text",
          "value": "]"
        }
      ]
    ],
    "code": "map({VAR},{INITMIN},{INITMAX},{FINMIN},{FINMAX})",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "map({VAR},{INITMIN},{INITMAX},{FINMIN},{FINMAX})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mapAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "mathOperations",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b6a05709-2cbb-45d4-a658-cea191b75655"
      }
    ],
    "bloqClass": "bloq-math-operations",
    "content": [
      [
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-math-operations-sqrt",
              "value": "sqrt"
            },
            {
              "label": "bloq-math-operations-abs",
              "value": "abs"
            },
            {
              "label": "ln",
              "value": "log"
            },
            {
              "label": "log10",
              "value": "log10"
            },
            {
              "label": "e^",
              "value": "exp"
            }
          ]
        },
        {
          "bloqInputId": "ARG",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b6a05709-2cbb-45d4-a658-cea191b75655"
        }
      ]
    ],
    "code": "{OPERATOR}({ARG})",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "{OPERATOR}({ARG})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"mathOperations\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "numberArrayAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "1b86bf10-4d10-46ce-b3b7-a705e1853ebe"
      }
    ],
    "bloqClass": "bloq-numberArray-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-numberArray-advanced-arraySize"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "1b86bf10-4d10-46ce-b3b7-a705e1853ebe"
        },
        {
          "alias": "text",
          "value": "bloq-numberArray-advanced-type"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-numberArray-advanced-float",
              "value": "float *"
            },
            {
              "label": "bloq-numberArray-advanced-int",
              "value": "int *"
            }
          ]
        }
      ]
    ],
    "code": "({TYPE})malloc({VALUE}*sizeof({TYPE}.withoutAsterisk))",
    "returnType": {
      "type": "fromDropdown",
      "idDropdown": "TYPE",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "({TYPE})malloc({VALUE}*sizeof(¬{TYPE.withoutAsterisk}))"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"numberArrayAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "round-v1",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "3bf78737-8e37-4e40-bd7f-a686681b6939"
      }
    ],
    "bloqClass": "bloq-round",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-round-advanced-roundto"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-round-advanced-floor",
              "value": "floor"
            },
            {
              "label": "bloq-round-advanced-ceil",
              "value": "ceil"
            },
            {
              "label": "bloq-round-advanced-round",
              "value": "round"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-round-advanced-thenumber"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "3bf78737-8e37-4e40-bd7f-a686681b6939"
        }
      ]
    ],
    "code": "{OPERATOR}({VAR})",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "{OPERATOR}({VAR})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"round-v1\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "basicOperations",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable",
          "basicOperations",
          "parenthesis"
        ],
        "name": "e1a9b652-5716-48f8-8297-f0c44005d4a8"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable",
          "basicOperations",
          "parenthesis"
        ],
        "name": "63b6cfc2-8e78-4312-a0f6-f7aaf6c7b6f8"
      }
    ],
    "bloqClass": "bloq-basic-operations",
    "content": [
      [
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable",
            "basicOperations",
            "parenthesis"
          ],
          "name": "e1a9b652-5716-48f8-8297-f0c44005d4a8"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "+",
              "value": "+"
            },
            {
              "label": "-",
              "value": "-"
            },
            {
              "label": "x",
              "value": "*"
            },
            {
              "label": "/",
              "value": "/"
            },
            {
              "label": "^",
              "value": "^"
            },
            {
              "label": "%",
              "value": "%"
            }
          ]
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable",
            "basicOperations",
            "parenthesis"
          ],
          "name": "63b6cfc2-8e78-4312-a0f6-f7aaf6c7b6f8"
        }
      ]
    ],
    "code": "'{OPERATOR}' === '^'? 'pow({ARG1},{ARG2})' : '({ARG1} {OPERATOR} {ARG2})'",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "conditional": {
            "aliasId": "OPERATOR",
            "code": {
              "+": "{ARG1} {OPERATOR} {ARG2}",
              "-": "{ARG1} {OPERATOR} {ARG2}",
              "*": "{ARG1} {OPERATOR} {ARG2}",
              "/": "{ARG1} {OPERATOR} {ARG2}",
              "^": "{ARG1} ** {ARG2}",
              "%": "{ARG1} {OPERATOR} {ARG2}"
            }
          }
        }
      ]
    },
    "arduino": {
      "conditional": {
        "aliasId": "OPERATOR",
        "code": {
          "+": "{ARG1} {OPERATOR} {ARG2}",
          "-": "{ARG1} {OPERATOR} {ARG2}",
          "*": "{ARG1} {OPERATOR} {ARG2}",
          "/": "{ARG1} {OPERATOR} {ARG2}",
          "^": "pow({ARG1}, {ARG2})",
          "%": "{ARG1} {OPERATOR} {ARG2}"
        }
      }
    }
  },
  {
    "type": "output",
    "name": "map",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "readSensor",
          "selectVariable"
        ],
        "name": "5be1dfee-db33-44f8-afcd-05640127094b"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "6ac80db6-16df-4887-b889-b59fa4ea6abc"
      }
    ],
    "bloqClass": "bloq-map",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-map-map"
        },
        {
          "bloqInputId": "VAR",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "readSensor",
            "selectVariable"
          ],
          "name": "5be1dfee-db33-44f8-afcd-05640127094b"
        },
        {
          "alias": "text",
          "value": "bloq-map-value"
        },
        {
          "bloqInputId": "MAXVAL",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "6ac80db6-16df-4887-b889-b59fa4ea6abc"
        },
        {
          "alias": "text",
          "value": "]"
        }
      ]
    ],
    "code": "map({VAR},0,1023,0,{MAXVAL})",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "map({VAR},0,1023,0,{MAXVAL})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"map\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "number",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-number",
    "content": [
      [
        {
          "id": "VALUE",
          "alias": "numberInput",
          "value": 0
        }
      ]
    ],
    "code": "{VALUE}",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "{VALUE}"
    },
    "python": {
      "codeLines": [
        {
          "code": "{VALUE}"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "numberArray",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-numberArray",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-numberArray-arraySize"
        },
        {
          "id": "VALUE",
          "alias": "numberInput",
          "value": 3
        },
        {
          "alias": "text",
          "value": "bloq-numberArray-floatType"
        }
      ]
    ],
    "code": "(float*)malloc({VALUE}*sizeof(float))",
    "returnType": {
      "type": "simple",
      "value": "float *"
    },
    "arduino": {
      "code": "(float*)malloc({VALUE}*sizeof(float))"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"numberArray\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "parenthesis",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "basicOperations"
        ],
        "name": "34cbbfa4-64c7-451e-bb5b-74594da2d5d7"
      }
    ],
    "bloqClass": "bloq-parenthesis",
    "content": [
      [
        {
          "alias": "text",
          "value": "("
        },
        {
          "bloqInputId": "OPERATION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "basicOperations"
          ],
          "name": "34cbbfa4-64c7-451e-bb5b-74594da2d5d7"
        },
        {
          "alias": "text",
          "value": ")"
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "({OPERATION})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"parenthesis\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "random",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "d7d29240-5521-41c7-bfc7-7d3d5c936718"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "51b91f56-2505-4724-86bb-d7a93a685493"
      }
    ],
    "bloqClass": "bloq-random",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-random-random"
        },
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "d7d29240-5521-41c7-bfc7-7d3d5c936718"
        },
        {
          "alias": "text",
          "value": "bloq-random-and"
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "float"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "51b91f56-2505-4724-86bb-d7a93a685493"
        }
      ]
    ],
    "code": "random({ARG1},{ARG2}+1)",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "random({ARG1},{ARG2}+1)"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"random\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "randomSeed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-random-seed",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-random-seed"
        }
      ]
    ],
    "code": "randomSeed(micros());",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "randomSeed(micros());"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"randomSeed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "output",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ]
  },
  {
    "type": "statement",
    "name": "phoneConfigTwitter",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-twitter-config",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-twitter-config"
        }
      ]
    ],
    "code": "/*sendTwitterAppConfig*/",
    "arduino": {
      "code": "/*sendTwitterAppConfig*/"
    }
  },
  {
    "type": "statement",
    "name": "phoneEmitSound",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-phone-sound",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-sounds"
        },
        {
          "id": "SOUND",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-phone-sounds-bass-v1",
              "value": "\"bass\""
            },
            {
              "label": "bloq-phone-sounds-bongo-v1",
              "value": "\"bongo\""
            },
            {
              "label": "bloq-phone-sounds-highhat-v1",
              "value": "\"highhat\""
            },
            {
              "label": "bloq-phone-sounds-snare-v1",
              "value": "\"snare\""
            },
            {
              "label": "bloq-phone-sounds-meow-v1",
              "value": "\"meow\""
            },
            {
              "label": "bloq-phone-sounds-joke-v1",
              "value": "\"joke\""
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-phone-sounds-device"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        }
      ]
    ],
    "code": "{PHONE}.println(\"playSound-\" + {SOUND});delay(1000);",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "code": "{PHONE}.println(String(\"playSound-\")+String({SOUND}));delay(1000);"
    },
    "python": {
      "codeLines": [
        {
          "code": "emitir_sonido(server_sock, {SOUND})"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "phoneReadAccel",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-phone-read-accel",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-read-read"
        },
        {
          "id": "MESSAGE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-phone-acceleration",
              "value": "\"readAccel-\""
            },
            {
              "label": "bloq-phone-lacceleration",
              "value": "\"readLAccel-\""
            },
            {
              "label": "bloq-phone-gravity",
              "value": "\"readGravity-\""
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-phone-axis"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "x",
              "value": "\"x\""
            },
            {
              "label": "y",
              "value": "\"y\""
            },
            {
              "label": "z",
              "value": "\"z\""
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-phone-of"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "(m/s²)"
        }
      ]
    ],
    "code": "{PHONE}.readString()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "extraFunctionCode": "float getAcceleration(String axis, String message, bqSoftwareSerial & phone){phone.println(String(message)+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
      "code": "getAcceleration({AXIS}, {MESSAGE}, {PHONE})"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "recibir_aceleracion(server_sock, {MESSAGE}, {AXIS})"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "phoneReadGyroscope",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-phone-read-gyros",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-gyroscope"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "x",
              "value": "\"x\""
            },
            {
              "label": "y",
              "value": "\"y\""
            },
            {
              "label": "z",
              "value": "\"z\""
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-phone-of"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "(rad/s)"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "extraFunctionCode": "float getGyroscope(String axis,bqSoftwareSerial & phone){phone.println(String(\"readGyros-\")+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
      "code": "getGyroscope({AXIS}, {PHONE})"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "recibir_giroscopio(server_sock, {AXIS})"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "phoneReadLight",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-phone-read-light",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-light"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "(lx)"
        }
      ]
    ],
    "code": "{PHONE}.readString()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "extraFunctionCode": "float getLight(bqSoftwareSerial & phone){phone.println(String(\"readLight-\"));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
      "code": "getLight({PHONE})"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "leer_luz(server_sock)"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "phoneReadMagnetic",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-phone-read-magnetic",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-magnetic"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "x",
              "value": "\"x\""
            },
            {
              "label": "y",
              "value": "\"y\""
            },
            {
              "label": "z",
              "value": "\"z\""
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-phone-of"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "(μT)"
        }
      ]
    ],
    "code": "{PHONE}.readString()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "extraFunctionCode": "float getMagneticField(String axis,bqSoftwareSerial & phone){phone.println(String(\"readMagnetic-\")+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
      "code": "getMagneticField({AXIS}, {PHONE})"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "recibir_campomagnetico(server_sock, {AXIS})"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "phoneReadOrientation",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-phone-read-orientation",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-value"
        },
        {
          "id": "AXIS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-phone-orientation-azimuth",
              "value": "\"azimuth\""
            },
            {
              "label": "bloq-phone-orientation-roll",
              "value": "\"roll\""
            },
            {
              "label": "bloq-phone-orientation-pitch",
              "value": "\"pitch\""
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-phone-of"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "(º)"
        }
      ]
    ],
    "code": "{PHONE}.readString()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "extraFunctionCode": "float getOrientation(String axis,bqSoftwareSerial & phone){phone.println(String(\"readOrientation-\")+String(axis));String data=\"\";while(data==\"\"){data=phone.readString();}return data.toFloat();}",
      "code": "getOrientation({AXIS}, {PHONE})"
    },
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "python": {
      "codeLines": [
        {
          "code": "recibir_orientacion(server_sock, {AXIS})"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "phoneReceive",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-phone-receive",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-receive"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        }
      ]
    ],
    "code": "{PHONE}.readString()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "code": "{PHONE}.readString()"
    },
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "python": {
      "codeLines": [
        {
          "code": "recibe_texto(server_sock)"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "phoneSendText",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "number",
          "selectVariable"
        ],
        "name": "d8352d16-4b40-4a5a-ae86-ee735cfe6d7d"
      }
    ],
    "bloqClass": "bloq-phone-write",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-write-show"
        },
        {
          "bloqInputId": "DATA",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "number",
            "selectVariable"
          ],
          "name": "d8352d16-4b40-4a5a-ae86-ee735cfe6d7d"
        },
        {
          "alias": "text",
          "value": "bloq-phone-screen"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        }
      ]
    ],
    "code": "{PHONE}.println(\"write-\" + {DATA});",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "code": "{PHONE}.println(String(\"write-\")+String({DATA}));"
    },
    "python": {
      "codeLines": [
        {
          "code": "escribe_texto(server_sock, {DATA})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "phoneSendTweet",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "16477eec-359f-4b05-b37a-fff579c8e770"
      }
    ],
    "bloqClass": "bloq-send-tweet",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-send-tweet"
        },
        {
          "bloqInputId": "TWEET",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "selectVariable"
          ],
          "name": "16477eec-359f-4b05-b37a-fff579c8e770"
        },
        {
          "alias": "text",
          "value": "bloq-from-device"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        }
      ]
    ],
    "code": "{PHONE}.println(\"twitterSend-\" + {TWEET});",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "code": "{PHONE}.println(String(\"twitterSend-\")+String({TWEET}));"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"phoneSendTweet\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "phoneTurnOffLight",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-phone-turnoff-light",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-turnoff-light"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        }
      ]
    ],
    "code": "{PHONE}.println(\"turnoffFlashlight-\"); delay(500);",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "code": "{PHONE}.println(String(\"turnoffFlashlight-\")); delay(500);"
    },
    "python": {
      "codeLines": [
        {
          "code": "apaga_linterna(server_sock)"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "phoneTurnOnLight",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-phone-turnon-light",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-phone-turnon-light"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        }
      ]
    ],
    "code": "{PHONE}.println(\"turnonFlashlight-\");  delay(500);",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "code": "{PHONE}.println(String(\"turnonFlashlight-\"));  delay(500);"
    },
    "python": {
      "codeLines": [
        {
          "code": "enciende_linterna(server_sock)"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "phoneisCovered",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-phone-isCovered",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-the"
        },
        {
          "id": "PHONE",
          "alias": "dynamicDropdown",
          "options": "serialElements"
        },
        {
          "alias": "text",
          "value": "bloq-phone-is"
        },
        {
          "id": "COVERED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-phone-covered",
              "value": "\"covered\""
            },
            {
              "label": "bloq-phone-not-covered",
              "value": "\"ncovered\""
            }
          ]
        }
      ]
    ],
    "code": "{PHONE}.readString()",
    "arduino": {
      "includes": [
        "BitbloqSoftwareSerial.h"
      ],
      "setupExtraCode": "{PHONE}.begin(º[{PHONE}.baudRate]);",
      "needInstanceOf": [
        {
          "name": "{PHONE}",
          "type": "bqSoftwareSerial",
          "arguments": [
            "º[{PHONE}.pin.rx]",
            "º[{PHONE}.pin.tx]",
            "º[{PHONE}.baudRate]"
          ]
        }
      ],
      "extraFunctionCode": "boolean getProx(String cv,bqSoftwareSerial & phone){phone.println(String(\"readProx-\")+String(cv));String data=\"\";boolean result=false;while(data==\"\"){data=phone.readString();}if(data.indexOf(\"true\")>=0){result=true;}else{result=false;}return result;}",
      "code": "getProx({COVERED}, {PHONE})"
    },
    "returnType": {
      "type": "simple",
      "value": "boolean"
    },
    "python": {
      "codeLines": [
        {
          "code": "recibir_estacubierto(server_sock, {COVERED})"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "statement",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ]
  },
  {
    "type": "statement-input",
    "name": "statement-input",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ]
  },
  {
    "type": "statement",
    "name": "cube",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-wait",
    "content": [
      [
        {
          "alias": "text",
          "value": "Crear cubo con tamaño X:"
        },
        {
          "id": "XINPUT",
          "alias": "numberInput",
          "value": 10
        },
        {
          "alias": "text",
          "value": "Y:"
        },
        {
          "id": "YINPUT",
          "alias": "numberInput",
          "value": 10
        },
        {
          "alias": "text",
          "value": "Z:"
        },
        {
          "id": "ZINPUT",
          "alias": "numberInput",
          "value": 10
        }
      ]
    ],
    "arduino": {
      "code": "cube([ {XINPUT}, {YINPUT}, {ZINPUT} ], center=false);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"cube\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "sphere",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-wait",
    "content": [
      [
        {
          "alias": "text",
          "value": "Crear esfera con radio"
        },
        {
          "id": "RAD",
          "alias": "numberInput",
          "value": 10
        }
      ]
    ],
    "arduino": {
      "code": "sphere(r={RAD});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"sphere\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "char",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-string",
    "content": [
      [
        {
          "alias": "text",
          "value": "'"
        },
        {
          "id": "TEXT",
          "alias": "charInput",
          "placeholder": "bloq-char"
        },
        {
          "alias": "text",
          "value": "'"
        }
      ]
    ],
    "code": "'{TEXT}'",
    "returnType": {
      "type": "simple",
      "value": "char"
    },
    "arduino": {
      "code": "'{TEXT}'"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"char\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "stringArrayAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "5c4dbd28-e3d1-48b7-befb-0208e8026928"
      }
    ],
    "bloqClass": "bloq-stringArray-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-stringArray-advanced-arraySize"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "5c4dbd28-e3d1-48b7-befb-0208e8026928"
        },
        {
          "alias": "text",
          "value": "bloq-stringArray-advanced-type"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-stringArray-advanced-string",
              "value": "String *"
            },
            {
              "label": "bloq-stringArray-advanced-char",
              "value": "char *"
            }
          ]
        }
      ]
    ],
    "code": "({TYPE})malloc({VALUE}*sizeof({TYPE}.withoutAsterisk))",
    "returnType": {
      "type": "fromDropdown",
      "idDropdown": "TYPE",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "({TYPE})malloc({VALUE}*sizeof(¬{TYPE.withoutAsterisk}))"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"stringArrayAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "substringAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "ff219424-fc2d-41c8-8d76-81d4fae5ad9c"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "f0d92ac0-e572-4828-aa7b-80639e9610c6"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "bbe842cc-3110-410b-b1a3-babaa4af9a67"
      }
    ],
    "bloqClass": "bloq-string",
    "content": [
      [
        {
          "alias": "text",
          "value": "Extraer texto de"
        },
        {
          "bloqInputId": "STRING",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable"
          ],
          "name": "ff219424-fc2d-41c8-8d76-81d4fae5ad9c"
        },
        {
          "alias": "text",
          "value": "empezando en la posición"
        },
        {
          "bloqInputId": "FROM",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "f0d92ac0-e572-4828-aa7b-80639e9610c6"
        },
        {
          "alias": "text",
          "value": "y acabando en la posición"
        },
        {
          "bloqInputId": "TO",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "bbe842cc-3110-410b-b1a3-babaa4af9a67"
        }
      ]
    ],
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "arduino": {
      "code": "{STRING}.substring({FROM}, {TO})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"substringAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "length",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "String"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "962c7423-603e-42b9-b43e-aabc9d9e87ef"
      }
    ],
    "bloqClass": "bloq-length",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-length-length"
        },
        {
          "bloqInputId": "TEXT",
          "alias": "bloqInput",
          "acceptType": [
            "String"
          ],
          "suggestedBloqs": [
            "selectVariable"
          ],
          "name": "962c7423-603e-42b9-b43e-aabc9d9e87ef"
        }
      ]
    ],
    "code": "{TEXT}.length()",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "{TEXT}.length()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"length\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "string",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-string",
    "content": [
      [
        {
          "alias": "text",
          "value": "\""
        },
        {
          "id": "TEXT",
          "alias": "stringInput",
          "placeholder": "bloq-string-string"
        },
        {
          "alias": "text",
          "value": "\""
        }
      ]
    ],
    "code": "\"{TEXT}\"",
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "arduino": {
      "code": "\"{TEXT}\""
    },
    "python": {
      "codeLines": [
        {
          "code": "\"{TEXT}\""
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "stringArray",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-stringArray",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-stringArray-arraySize"
        },
        {
          "id": "VALUE",
          "alias": "numberInput",
          "value": 3
        },
        {
          "alias": "text",
          "value": "bloq-stringArray-stringType"
        }
      ]
    ],
    "code": "(String *)malloc({VALUE}*sizeof(String))",
    "returnType": {
      "type": "simple",
      "value": "String *"
    },
    "arduino": {
      "code": "(String *)malloc({VALUE}*sizeof(String))"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"stringArray\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "stringCreate",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "selectVariable"
        ],
        "name": "cf766575-565d-450e-8184-bc9b06685374"
      }
    ],
    "bloqClass": "bloq-string-create",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-string-create-create"
        },
        {
          "bloqInputId": "TEXT",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "selectVariable"
          ],
          "name": "cf766575-565d-450e-8184-bc9b06685374"
        }
      ]
    ],
    "code": "String({TEXT})",
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "arduino": {
      "code": "String({TEXT})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"stringCreate\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "stringSum",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "String"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "9ce2dc02-f800-40fc-b84e-fd6b263a0fb9"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "String"
        ],
        "suggestedBloqs": [
          "string",
          "selectVariable"
        ],
        "name": "7586af11-e026-4fba-856b-332f2253d270"
      }
    ],
    "bloqClass": "bloq-string-sum",
    "content": [
      [
        {
          "bloqInputId": "ARG1",
          "alias": "bloqInput",
          "acceptType": [
            "String"
          ],
          "suggestedBloqs": [
            "string",
            "selectVariable"
          ],
          "name": "9ce2dc02-f800-40fc-b84e-fd6b263a0fb9"
        },
        {
          "alias": "text",
          "value": "+"
        },
        {
          "bloqInputId": "ARG2",
          "alias": "bloqInput",
          "acceptType": [
            "String"
          ],
          "suggestedBloqs": [
            "string",
            "selectVariable"
          ],
          "name": "7586af11-e026-4fba-856b-332f2253d270"
        }
      ]
    ],
    "code": "String({ARG1})+String({ARG2})",
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "arduino": {
      "code": "String({ARG1})+String({ARG2})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"stringSum\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "substring",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-string",
    "content": [
      [
        {
          "alias": "text",
          "value": "Extraer texto de"
        },
        {
          "id": "STRING",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "empezando en la posición"
        },
        {
          "id": "FROM",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "y acabando en la posición"
        },
        {
          "id": "TO",
          "alias": "numberInput",
          "value": 3
        }
      ]
    ],
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "arduino": {
      "code": "{STRING}.substring({FROM}, {TO})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"substring\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "arrayVariableAdvanced",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "aafc07d6-5540-43ea-9bdb-f2f16898f6f1"
      }
    ],
    "bloqClass": "bloq-array-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-array-variable-variable"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "["
        },
        {
          "bloqInputId": "POSITION",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable"
          ],
          "name": "aafc07d6-5540-43ea-9bdb-f2f16898f6f1"
        },
        {
          "alias": "text",
          "value": "]"
        }
      ]
    ],
    "code": "{VAR}[{POSITION}]",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "VAR",
      "pointer": "true",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "{VAR}[{POSITION}]"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"arrayVariableAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "declareArrayAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "float",
          "int"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "e1b3a877-b7fa-456a-95b6-fcc19d3dd222"
      }
    ],
    "bloqClass": "bloq-declare-array",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-declare-array-declare"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "placeholder": "bloq-name-default"
        },
        {
          "alias": "text",
          "value": "bloq-declare-array-declare-type"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-declare-variable-declare-type-int",
              "value": "int"
            },
            {
              "label": "bloq-declare-variable-declare-type-float",
              "value": "float"
            },
            {
              "label": "bloq-declare-variable-declare-type-text",
              "value": "String"
            },
            {
              "label": "bloq-declare-variable-declare-type-char",
              "value": "char"
            },
            {
              "label": "bloq-declare-variable-declare-type-bool",
              "value": "bool"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-declare-array-declare-size"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "float",
            "int"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "e1b3a877-b7fa-456a-95b6-fcc19d3dd222"
        }
      ]
    ],
    "createDynamicContent": "softwareVars",
    "returnType": {
      "type": "fromDropdown",
      "idDropdown": "TYPE"
    },
    "code": "{TYPE} {NAME} [{VALUE}];",
    "arduino": {
      "code": "{TYPE} {NAME} [{VALUE}];"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"declareArrayAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "declareVariableAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum",
          "char",
          "boolean"
        ],
        "name": "79087d0d-59d3-4b22-b4a1-0094f5924f08"
      }
    ],
    "bloqClass": "bloq-declare-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-declare-variable-declare"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "placeholder": "bloq-name-default"
        },
        {
          "alias": "text",
          "value": "bloq-declare-variable-declare-type"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-declare-variable-declare-type-int",
              "value": "int"
            },
            {
              "label": "bloq-declare-variable-declare-type-float",
              "value": "float"
            },
            {
              "label": "bloq-declare-variable-declare-type-text",
              "value": "String"
            },
            {
              "label": "bloq-declare-variable-declare-type-char",
              "value": "char"
            },
            {
              "label": "bloq-declare-variable-declare-type-bool",
              "value": "bool"
            }
          ]
        },
        {
          "alias": "text",
          "value": "="
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "basicOperations",
            "string",
            "stringSum",
            "char",
            "boolean"
          ],
          "name": "79087d0d-59d3-4b22-b4a1-0094f5924f08"
        }
      ]
    ],
    "returnType": {
      "type": "fromDropdown",
      "idDropdown": "TYPE"
    },
    "createDynamicContent": "softwareVars",
    "code": "{TYPE} {NAME} = {VALUE};",
    "arduino": {
      "code": "{TYPE} {NAME} = {VALUE};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"declareVariableAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "hwVariable",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-hw-variable-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-hw-variable-advanced-variable"
        },
        {
          "id": "COMPONENT",
          "alias": "dynamicDropdown",
          "options": "varComponents"
        }
      ]
    ],
    "code": "{COMPONENT}",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "COMPONENT",
      "options": "varComponents"
    },
    "arduino": {
      "code": "{COMPONENT}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"hwVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "setArrayVariableAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "fb2d6644-fcbc-45db-8cc4-7748f9f15dfc"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "d53177ed-e565-43e2-aa9b-d9d02d0ba673"
      }
    ],
    "bloqClass": "bloq-set-variableArray",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-set-variableArray-variable"
        },
        {
          "id": "NAME",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "["
        },
        {
          "bloqInputId": "ITERATOR",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable"
          ],
          "name": "fb2d6644-fcbc-45db-8cc4-7748f9f15dfc"
        },
        {
          "alias": "text",
          "value": "]"
        },
        {
          "alias": "text",
          "value": "="
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable"
          ],
          "name": "d53177ed-e565-43e2-aa9b-d9d02d0ba673"
        }
      ]
    ],
    "code": "{NAME}[{ITERATOR}] = {VALUE};",
    "arduino": {
      "code": "{NAME}[{ITERATOR}] = {VALUE};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"setArrayVariableAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "arrayVariable",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-array-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-array-variable-variable"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "["
        },
        {
          "id": "POSITION",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "]"
        }
      ]
    ],
    "code": "{VAR}[{POSITION}]",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "VAR",
      "pointer": "true",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "{VAR}[{POSITION}]"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"arrayVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "declareArray",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-declare-array",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-declare-array-declare"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "placeholder": "bloq-name-default"
        },
        {
          "alias": "text",
          "value": "bloq-declare-array-declare-type"
        },
        {
          "id": "TYPE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-declare-variable-declare-type-int",
              "value": "int"
            },
            {
              "label": "bloq-declare-variable-declare-type-float",
              "value": "float"
            },
            {
              "label": "bloq-declare-variable-declare-type-text",
              "value": "String"
            },
            {
              "label": "bloq-declare-variable-declare-type-char",
              "value": "char"
            },
            {
              "label": "bloq-declare-variable-declare-type-bool",
              "value": "bool"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-declare-array-declare-size"
        },
        {
          "id": "VALUE",
          "alias": "numberInput",
          "value": 3
        }
      ]
    ],
    "createDynamicContent": "softwareVars",
    "returnType": {
      "type": "fromDropdown",
      "idDropdown": "TYPE"
    },
    "code": "{TYPE} {NAME} [{VALUE}];",
    "arduino": {
      "code": "{TYPE} {NAME} [{VALUE}];"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"declareArray\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "declareVariable",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "939c115c-c49c-4797-bdff-08447dd09459"
      }
    ],
    "bloqClass": "bloq-declare-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-declare-variable-declare"
        },
        {
          "id": "NAME",
          "alias": "varInput",
          "placeholder": "bloq-name-default"
        },
        {
          "alias": "text",
          "value": "="
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "basicOperations",
            "string",
            "stringSum"
          ],
          "name": "939c115c-c49c-4797-bdff-08447dd09459"
        }
      ]
    ],
    "returnType": {
      "type": "fromInput",
      "bloqInputId": "VALUE"
    },
    "createDynamicContent": "softwareVars",
    "code": "{VALUE.connectionType} {NAME} = {VALUE};",
    "arduino": {
      "code": "@{VALUE.returnType} {NAME} = {VALUE};"
    },
    "python": {
      "codeLines": [
        {
          "code": "{NAME} = {VALUE}"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "swVariable",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-sw-variable-advanced",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-sw-variable-advanced-variable"
        },
        {
          "id": "VALUE",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        }
      ]
    ],
    "code": "{VALUE}",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "VAR",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "{VALUE}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"swVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "selectVariable",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-select-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-select-variable-variable"
        },
        {
          "id": "VAR",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        }
      ]
    ],
    "code": "{VAR}",
    "returnType": {
      "type": "fromDynamicDropdown",
      "idDropdown": "VAR",
      "options": "softwareVars"
    },
    "arduino": {
      "code": "{VAR}"
    },
    "python": {
      "codeLines": [
        {
          "code": "{VAR}"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "setArrayVariable",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "pointer": "true",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "string",
          "selectVariable"
        ],
        "name": "8e45a92d-354b-4764-8ea7-9ec2e6684289"
      }
    ],
    "bloqClass": "bloq-set-variableArray",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-set-variableArray-variable"
        },
        {
          "id": "NAME",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "["
        },
        {
          "id": "ITERATOR",
          "alias": "numberInput",
          "value": 0
        },
        {
          "alias": "text",
          "value": "]"
        },
        {
          "alias": "text",
          "value": "="
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": {
            "type": "fromDynamicDropdown",
            "idDropdown": "NAME",
            "pointer": "true",
            "options": "softwareVars"
          },
          "suggestedBloqs": [
            "number",
            "string",
            "selectVariable"
          ],
          "name": "8e45a92d-354b-4764-8ea7-9ec2e6684289"
        }
      ]
    ],
    "code": "{NAME}[{ITERATOR}] = {VALUE};",
    "arduino": {
      "code": "{NAME}[{ITERATOR}] = {VALUE};"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"setArrayVariable\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "setVariable",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": {
          "type": "fromDynamicDropdown",
          "idDropdown": "NAME",
          "options": "softwareVars"
        },
        "suggestedBloqs": [
          "number",
          "basicOperations",
          "string",
          "stringSum"
        ],
        "name": "c07ddb20-c68a-4ba3-a24d-3ef8b8d4f739"
      }
    ],
    "bloqClass": "bloq-set-variable",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-set-variable-variable"
        },
        {
          "id": "NAME",
          "alias": "dynamicDropdown",
          "options": "softwareVars"
        },
        {
          "alias": "text",
          "value": "="
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": {
            "type": "fromDynamicDropdown",
            "idDropdown": "NAME",
            "options": "softwareVars"
          },
          "suggestedBloqs": [
            "number",
            "basicOperations",
            "string",
            "stringSum"
          ],
          "name": "c07ddb20-c68a-4ba3-a24d-3ef8b8d4f739"
        }
      ]
    ],
    "code": "{NAME} = {VALUE};",
    "python": {
      "codeLines": [
        {
          "code": "{NAME} = {VALUE}"
        }
      ]
    },
    "arduino": {
      "code": "{NAME} = {VALUE};"
    }
  },
  {
    "type": "output",
    "name": "zowiButtons",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zowi-buttons",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-buttons"
        },
        {
          "id": "BUTTON",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-buttons-A",
              "value": "PIN_AButton"
            },
            {
              "label": "bloq-zowi-buttons-B",
              "value": "PIN_BButton"
            }
          ]
        }
      ]
    ],
    "code": "digitalRead({BUTTON})",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "digitalRead({BUTTON})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiButtons\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zowiDistance",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zowi-distance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-distance-v1"
        }
      ]
    ],
    "code": "zowi.getDistance()",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.getDistance()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiDistance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMouthAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-mouth",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-mouth-custom"
        },
        {
          "id": "BINARY",
          "alias": "numberInput",
          "value": "111111111111111111111111111111"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.putMouth(0b00{BINARY}, false);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMouthAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsFront",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-front",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-movements-simple-walk-v1"
        },
        {
          "id": "DIR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-forward",
              "value": "FORWARD"
            },
            {
              "label": "bloq-zowi-movements-backward",
              "value": "BACKWARD"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 4
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-endtext"
        }
      ]
    ],
    "code": "zowi.walk({STEPS},{SPEED},{DIR});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.walk({STEPS},{SPEED},{DIR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsFront\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsHeightFront",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-height-front",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-movements-simple-flapping-v1"
        },
        {
          "id": "DIR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-forward",
              "value": "FORWARD"
            },
            {
              "label": "bloq-zowi-movements-height-backward",
              "value": "BACKWARD"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 1
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-height"
        },
        {
          "id": "HEIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-small",
              "value": "SMALL_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-medium",
              "value": "MEDIUM_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-big",
              "value": "BIG_HEIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-endtext"
        }
      ]
    ],
    "code": "zowi.flapping({STEPS},{SPEED},{HEIGHT},{DIR});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.flapping({STEPS},{SPEED},{HEIGHT},{DIR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsHeightFront\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsHeightSides",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-height-sides",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-simple-moonwalker-v1",
              "value": "moonwalker"
            },
            {
              "label": "bloq-zowi-movements-simple-crusaito-v1",
              "value": "crusaito"
            }
          ]
        },
        {
          "id": "DIR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-left",
              "value": "LEFT"
            },
            {
              "label": "bloq-zowi-movements-height-right",
              "value": "RIGHT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 1
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-height"
        },
        {
          "id": "HEIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-small",
              "value": "SMALL_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-medium",
              "value": "MEDIUM_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-big",
              "value": "BIG_HEIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-endtext"
        }
      ]
    ],
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT},{DIR});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT},{DIR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsHeightSides\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsNoDir-v1",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-no-dir-v1",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-simple-updown-v1",
              "value": "updown"
            },
            {
              "label": "bloq-zowi-movements-simple-swing-v1",
              "value": "swing"
            },
            {
              "label": "bloq-zowi-movements-simple-tiptoeSwing-v1",
              "value": "tiptoeSwing"
            },
            {
              "label": "bloq-zowi-movements-simple-jitter-v1",
              "value": "jitter"
            },
            {
              "label": "bloq-zowi-movements-simple-ascendingTurn-v1",
              "value": "ascendingTurn"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 4
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-no-dir-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-no-dir-height"
        },
        {
          "id": "HEIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-small",
              "value": "SMALL_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-medium",
              "value": "MEDIUM_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-big",
              "value": "BIG_HEIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-no-dir-endtext"
        }
      ]
    ],
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsNoDir-v1\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsSides",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-sides",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-simple-turn-v1",
              "value": "turn"
            },
            {
              "label": "bloq-zowi-movements-simple-shakeLeg-v1",
              "value": "shakeLeg"
            },
            {
              "label": "bloq-zowi-movements-simple-bend-v1",
              "value": "bend"
            }
          ]
        },
        {
          "id": "DIR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-left",
              "value": "LEFT"
            },
            {
              "label": "bloq-zowi-movements-right",
              "value": "RIGHT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 4
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-endtext"
        }
      ]
    ],
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{DIR});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{DIR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsSides\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zowiSound",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zowi-sound",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-sound-v1"
        }
      ]
    ],
    "code": "zowi.getNoise()",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.getNoise()"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiSound\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiComponentBuzzerAdvanced",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "b6f332cf-40f5-4f58-b97c-2cb4aac71a2d"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "116991f6-b13d-4421-a426-f2626ebd8887"
      }
    ],
    "bloqClass": "bloq-zowicomponent-buzzer-advance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-sound"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-note"
        },
        {
          "bloqInputId": "NOTE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "b6f332cf-40f5-4f58-b97c-2cb4aac71a2d"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-for"
        },
        {
          "bloqInputId": "SECONDS",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "116991f6-b13d-4421-a426-f2626ebd8887"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-advance-ms"
        }
      ]
    ],
    "code": "tone({BUZZER},{NOTE},{SECONDS});\ndelay({SECONDS});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi._tone({NOTE}, {SECONDS}, 0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiComponentBuzzerAdvanced\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiComponentBuzzer",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowicomponent-buzzer",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-buzzer-sound"
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-note"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-buzzer-do",
              "value": "261"
            },
            {
              "label": "bloq-buzzer-re",
              "value": "293"
            },
            {
              "label": "bloq-buzzer-mi",
              "value": "329"
            },
            {
              "label": "bloq-buzzer-fa",
              "value": "349"
            },
            {
              "label": "bloq-buzzer-sol",
              "value": "392"
            },
            {
              "label": "bloq-buzzer-la",
              "value": "440"
            },
            {
              "label": "bloq-buzzer-si",
              "value": "494"
            },
            {
              "label": "bloq-buzzer-do-#",
              "value": "277"
            },
            {
              "label": "bloq-buzzer-re-#",
              "value": "311"
            },
            {
              "label": "bloq-buzzer-fa-#",
              "value": "370"
            },
            {
              "label": "bloq-buzzer-sol-#",
              "value": "415"
            },
            {
              "label": "bloq-buzzer-la-#",
              "value": "466"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-for"
        },
        {
          "id": "SECONDS",
          "alias": "numberInput",
          "value": 2000
        },
        {
          "alias": "text",
          "value": "bloq-buzzer-ms"
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi._tone({NOTE}, {SECONDS}, 0);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiComponentBuzzer\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zowiReadSensor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zowicomponent-read-sensor",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-read-read"
        },
        {
          "id": "SENSOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-button-A",
              "value": "buttonA"
            },
            {
              "label": "bloq-zowi-button-B",
              "value": "buttonB"
            },
            {
              "label": "bloq-zowi-sound-sensor",
              "value": "sound"
            },
            {
              "label": "bloq-zowi-us-sensor",
              "value": "us"
            }
          ]
        }
      ]
    ],
    "code": "",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.readSensor(\"{SENSOR}\")"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiReadSensor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zowiSerialReceive",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zowicomponent-serial-receiver",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowicomponent-serial-receive"
        }
      ]
    ],
    "code": "{SERIAL}.readString()",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.readString()"
    },
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiSerialReceive\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zowiSerialReceiveInt",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zowicomponent-serial-receiver-int",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowicomponent-serial-receive-int"
        }
      ]
    ],
    "code": "{SERIAL}.readString()",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.readInt()"
    },
    "returnType": {
      "type": "simple",
      "value": "String"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiSerialReceiveInt\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiComponentSerialSend",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "string",
          "number",
          "selectVariable"
        ],
        "name": "386314c6-62d2-4ad7-b1b1-9ed3a62c337c"
      }
    ],
    "bloqClass": "bloq-zowicomponent-serial-send",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowicomponent-serial-send"
        },
        {
          "bloqInputId": "DATA",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "string",
            "number",
            "selectVariable"
          ],
          "name": "386314c6-62d2-4ad7-b1b1-9ed3a62c337c"
        },
        {
          "id": "LN",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-serial-send-println",
              "value": "true"
            },
            {
              "label": "bloq-serial-send-print",
              "value": "false"
            }
          ]
        }
      ]
    ],
    "code": "",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.serialSend({DATA}, {LN});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiComponentSerialSend\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovements",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-movements"
        },
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-walk",
              "value": "walk"
            },
            {
              "label": "bloq-zowi-movements-turn",
              "value": "turn"
            },
            {
              "label": "bloq-zowi-movements-shakeLeg",
              "value": "shakeLeg"
            },
            {
              "label": "bloq-zowi-movements-bend",
              "value": "bend"
            }
          ]
        },
        {
          "id": "DIR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-forward",
              "value": "FORWARD"
            },
            {
              "label": "bloq-zowi-movements-backward",
              "value": "BACKWARD"
            },
            {
              "label": "bloq-zowi-movements-left",
              "value": "LEFT"
            },
            {
              "label": "bloq-zowi-movements-right",
              "value": "RIGHT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 4
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-endtext"
        }
      ]
    ],
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{DIR});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.{MOVEMENT}({STEPS}, {SPEED}, {DIR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovements\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsHeight",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-height",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height"
        },
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-moonwalker",
              "value": "moonwalker"
            },
            {
              "label": "bloq-zowi-movements-height-crusaito",
              "value": "crusaito"
            },
            {
              "label": "bloq-zowi-movements-height-flapping",
              "value": "flapping"
            }
          ]
        },
        {
          "id": "DIR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-forward",
              "value": "FORWARD"
            },
            {
              "label": "bloq-zowi-movements-height-backward",
              "value": "BACKWARD"
            },
            {
              "label": "bloq-zowi-movements-height-left",
              "value": "LEFT"
            },
            {
              "label": "bloq-zowi-movements-height-right",
              "value": "RIGHT"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 1
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-height"
        },
        {
          "id": "HEIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-small",
              "value": "SMALL_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-medium",
              "value": "MEDIUM_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-big",
              "value": "BIG_HEIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-height-endtext"
        }
      ]
    ],
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT},{DIR});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.{MOVEMENT}({STEPS}, {SPEED}, {HEIGHT}, {DIR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsHeight\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsNoDir",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-no-dir",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-movements-no-dir"
        },
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-no-dir-updown",
              "value": "updown"
            },
            {
              "label": "bloq-zowi-movements-no-dir-swing",
              "value": "swing"
            },
            {
              "label": "bloq-zowi-movements-no-dir-tiptoeSwing",
              "value": "tiptoeSwing"
            },
            {
              "label": "bloq-zowi-movements-no-dir-jitter",
              "value": "jitter"
            },
            {
              "label": "bloq-zowi-movements-no-dir-ascendingTurn",
              "value": "ascendingTurn"
            },
            {
              "label": "bloq-zowi-movements-no-dir-jump",
              "value": "jump"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 4
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-no-dir-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-speed-small",
              "value": "LOW_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-medium",
              "value": "MEDIUM_SPEED"
            },
            {
              "label": "bloq-zowi-movements-speed-high",
              "value": "HIGH_SPEED"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-no-dir-height"
        },
        {
          "id": "HEIGHT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-height-small",
              "value": "SMALL_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-medium",
              "value": "MEDIUM_HEIGHT"
            },
            {
              "label": "bloq-zowi-movements-height-big",
              "value": "BIG_HEIGHT"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-no-dir-endtext"
        }
      ]
    ],
    "code": "zowi.{MOVEMENT}({STEPS},{SPEED},{HEIGHT});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.{MOVEMENT}({STEPS}, {SPEED}, {HEIGHT});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsNoDir\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiGestures",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-gestures",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-gestures-v1"
        },
        {
          "id": "GESTURE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-gestures-ZowiHappy-v1",
              "value": "ZowiHappy"
            },
            {
              "label": "bloq-zowi-gestures-ZowiSuperHappy-v1",
              "value": "ZowiSuperHappy"
            },
            {
              "label": "bloq-zowi-gestures-ZowiSad-v1",
              "value": "ZowiSad"
            },
            {
              "label": "bloq-zowi-gestures-ZowiSleeping-v1",
              "value": "ZowiSleeping"
            },
            {
              "label": "bloq-zowi-gestures-ZowiFart-v1",
              "value": "ZowiFart"
            },
            {
              "label": "bloq-zowi-gestures-ZowiConfused-v1",
              "value": "ZowiConfused"
            },
            {
              "label": "bloq-zowi-gestures-ZowiLove-v1",
              "value": "ZowiLove"
            },
            {
              "label": "bloq-zowi-gestures-ZowiAngry-v1",
              "value": "ZowiAngry"
            },
            {
              "label": "bloq-zowi-gestures-ZowiFretful-v1",
              "value": "ZowiFretful"
            },
            {
              "label": "bloq-zowi-gestures-ZowiVictory-v1",
              "value": "ZowiVictory"
            },
            {
              "label": "bloq-zowi-gestures-ZowiFail-v1",
              "value": "ZowiFail"
            }
          ]
        }
      ]
    ],
    "code": "zowi.playGesture({GESTURE});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.playGesture({GESTURE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiGestures\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiHome",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-rest",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-rest-v1"
        }
      ]
    ],
    "code": "zowi.home();",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.home();"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiHome\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zowiIfButtons",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-if-buttons",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-if-buttons"
        },
        {
          "id": "BUTTON",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "A",
              "value": "PIN_AButton"
            },
            {
              "label": "B",
              "value": "PIN_BButton"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-if-buttons-then-v1"
        }
      ]
    ],
    "code": "if(digitalRead({BUTTON}) == 1){{STATEMENTS}}",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "if(digitalRead({BUTTON}) == 1){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiIfButtons\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zowiIfDistance",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-if-distance",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-if-distance"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-if-distance-less",
              "value": "<"
            },
            {
              "label": "bloq-zowi-if-distance-more",
              "value": ">"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-if-distance-than"
        },
        {
          "id": "DISTANCE",
          "alias": "numberInput",
          "value": 15
        },
        {
          "alias": "text",
          "value": "bloq-zowi-if-distance-then-v1"
        }
      ]
    ],
    "code": "if(zowi.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "if(zowi.getDistance() {OPERATOR} {DISTANCE}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiIfDistance\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zowiIfSound",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top",
        "acceptedAliases": [
          "all",
          "ifDown"
        ]
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-if-sound",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-if-sound-v1"
        }
      ]
    ],
    "code": " if(zowi.getNoise() >= 650){{STATEMENTS}}",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": " if(zowi.getNoise() >= 650){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiIfSound\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMouth",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-mouth",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-mouth-v1"
        },
        {
          "id": "GESTURE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-mouth-smile",
              "value": "smile_code"
            },
            {
              "label": "bloq-zowi-mouth-sad",
              "value": "sad_code"
            },
            {
              "label": "bloq-zowi-mouth-happy",
              "value": "happyOpen_code"
            },
            {
              "label": "bloq-zowi-mouth-confused",
              "value": "confused_code"
            },
            {
              "label": "bloq-zowi-mouth-bigSurprise",
              "value": "bigSurprise_code"
            },
            {
              "label": "bloq-zowi-mouth-tongueOut",
              "value": "tongueOut_code"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zowi-mouth-mouth"
        }
      ]
    ],
    "code": "zowi.putMouth({GESTURE}, false);",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.putMouth({GESTURE}, false);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMouth\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiMovementsSimple",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-movements-simple",
    "content": [
      [
        {
          "id": "MOVEMENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-movements-simple-walk-v1",
              "value": "walk"
            },
            {
              "label": "bloq-zowi-movements-simple-turn-v1",
              "value": "turn"
            },
            {
              "label": "bloq-zowi-movements-simple-shakeLeg-v1",
              "value": "shakeLeg"
            },
            {
              "label": "bloq-zowi-movements-simple-bend-v1",
              "value": "bend"
            },
            {
              "label": "bloq-zowi-movements-simple-moonwalker-v1",
              "value": "moonwalker"
            },
            {
              "label": "bloq-zowi-movements-simple-crusaito-v1",
              "value": "crusaito"
            },
            {
              "label": "bloq-zowi-movements-simple-flapping-v1",
              "value": "flapping"
            },
            {
              "label": "bloq-zowi-movements-simple-updown-v1",
              "value": "updown"
            },
            {
              "label": "bloq-zowi-movements-simple-swing-v1",
              "value": "swing"
            },
            {
              "label": "bloq-zowi-movements-simple-tiptoeSwing-v1",
              "value": "tiptoeSwing"
            },
            {
              "label": "bloq-zowi-movements-simple-jitter-v1",
              "value": "jitter"
            },
            {
              "label": "bloq-zowi-movements-simple-ascendingTurn-v1",
              "value": "ascendingTurn"
            },
            {
              "label": "bloq-zowi-movements-simple-jump-v1",
              "value": "jump"
            }
          ]
        },
        {
          "id": "STEPS",
          "alias": "numberInput",
          "value": 4
        },
        {
          "alias": "text",
          "value": "bloq-zowi-movements-simple-steps"
        }
      ]
    ],
    "code": "zowi.{MOVEMENT}({STEPS});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.{MOVEMENT}({STEPS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiMovementsSimple\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zowiSounds",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zowi-sounds",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zowi-sounds-v1"
        },
        {
          "id": "SOUND",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zowi-sounds-surprise",
              "value": "S_surprise"
            },
            {
              "label": "bloq-zowi-sounds-OhOoh",
              "value": "S_OhOoh"
            },
            {
              "label": "bloq-zowi-sounds-cuddly",
              "value": "S_cuddly"
            },
            {
              "label": "bloq-zowi-sounds-sleeping",
              "value": "S_sleeping"
            },
            {
              "label": "bloq-zowi-sounds-happy",
              "value": "S_happy"
            },
            {
              "label": "bloq-zowi-sounds-sad",
              "value": "S_sad"
            },
            {
              "label": "bloq-zowi-sounds-confused",
              "value": "S_confused"
            },
            {
              "label": "bloq-zowi-sounds-fart1-v1",
              "value": "S_fart1"
            }
          ]
        }
      ]
    ],
    "code": "zowi.sing({SOUND});",
    "arduino": {
      "includes": [
        "BitbloqZowi.h",
        "BitbloqUS.h",
        "BitbloqBatteryReader.h",
        "BitbloqLedMatrix.h",
        "Servo.h",
        "BitbloqOscillator.h",
        "EEPROM.h"
      ],
      "needInstanceOf": [
        {
          "name": "zowi",
          "type": "Zowi"
        }
      ],
      "setupExtraCode": "zowi.init();",
      "code": "zowi.sing({SOUND});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zowiSounds\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorButtonIf",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-button-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-button-if"
        },
        {
          "id": "BUTTON",
          "alias": "dynamicDropdown",
          "options": "zumjuniorButtons"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-button-is"
        },
        {
          "id": "IS_PRESSED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-button-pressed",
              "value": "digitalRead"
            },
            {
              "label": "bloq-zumjunior-button-notpressed",
              "value": "!digitalRead"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-button-exec"
        }
      ]
    ],
    "suggestedBloqs": [
      "else",
      "elseif"
    ],
    "code": "if({IS_PRESSED}({BUTTON}Pin)){{STATEMENTS}}",
    "arduino": {
      "code": "if({IS_PRESSED}({BUTTON}Pin)){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorButtonIf\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorButtonWhile",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-button-while",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-button-while"
        },
        {
          "id": "BUTTON",
          "alias": "dynamicDropdown",
          "options": "zumjuniorButtons"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-button-is"
        },
        {
          "id": "IS_PRESSED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-button-pressed",
              "value": "digitalRead"
            },
            {
              "label": "bloq-zumjunior-button-notpressed",
              "value": "!digitalRead"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-button-exec"
        }
      ]
    ],
    "code": "while({IS_PRESSED}({BUTTON}Pin)){{STATEMENTS}}",
    "arduino": {
      "code": "while({IS_PRESSED}({BUTTON}Pin)){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorButtonWhile\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorClearDisplay",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-clear-display",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-clear-display"
        }
      ]
    ],
    "code": "segmentDisplay.displayChar(' ', ' ');",
    "arduino": {
      "code": "segmentDisplay.displayChar(' ', ' ');"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorClearDisplay\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorColorIf",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-color-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-color-if"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-color-red",
              "value": "0"
            },
            {
              "label": "bloq-zumjunior-color-green",
              "value": "1"
            },
            {
              "label": "bloq-zumjunior-color-blue",
              "value": "2"
            },
            {
              "label": "bloq-zumjunior-color-white",
              "value": "3"
            },
            {
              "label": "bloq-zumjunior-color-black",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-sensors-exec"
        }
      ]
    ],
    "suggestedBloqs": [
      "else",
      "elseif"
    ],
    "code": "if(colorSensor.whichColor() == {COLOR}){{STATEMENTS}}",
    "arduino": {
      "code": "if(colorSensor.whichColor() == {COLOR}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorColorIf\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorColorWhile",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-color-while",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-color-while"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-color-red",
              "value": "0"
            },
            {
              "label": "bloq-zumjunior-color-green",
              "value": "1"
            },
            {
              "label": "bloq-zumjunior-color-blue",
              "value": "2"
            },
            {
              "label": "bloq-zumjunior-color-white",
              "value": "3"
            },
            {
              "label": "bloq-zumjunior-color-black",
              "value": "4"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-sensors-exec"
        }
      ]
    ],
    "code": "while(colorSensor.whichColor() == {COLOR}){{STATEMENTS}}",
    "arduino": {
      "code": "while(colorSensor.whichColor() == {COLOR}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorColorWhile\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorDisplayNumber",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "d6f15f5a-0c45-4060-938f-6ea91fe6b55d"
      }
    ],
    "bloqClass": "bloq-zumjunior-display-number",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-display-number"
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "d6f15f5a-0c45-4060-938f-6ea91fe6b55d"
        }
      ]
    ],
    "code": "segmentDisplay.displayInt({VALUE});",
    "arduino": {
      "code": "segmentDisplay.displayInt({VALUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorDisplayNumber\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorDisplayNumbers",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-display-numbers",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-display-numbers"
        },
        {
          "id": "DIGIT1",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "0",
              "value": "0"
            },
            {
              "label": "1",
              "value": "1"
            },
            {
              "label": "2",
              "value": "2"
            },
            {
              "label": "3",
              "value": "3"
            },
            {
              "label": "4",
              "value": "4"
            },
            {
              "label": "5",
              "value": "5"
            },
            {
              "label": "6",
              "value": "6"
            },
            {
              "label": "7",
              "value": "7"
            },
            {
              "label": "8",
              "value": "8"
            },
            {
              "label": "9",
              "value": "9"
            },
            {
              "label": "bloq-zumjunior-display-none",
              "value": " "
            }
          ]
        },
        {
          "id": "DIGIT2",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "0",
              "value": "0"
            },
            {
              "label": "1",
              "value": "1"
            },
            {
              "label": "2",
              "value": "2"
            },
            {
              "label": "3",
              "value": "3"
            },
            {
              "label": "4",
              "value": "4"
            },
            {
              "label": "5",
              "value": "5"
            },
            {
              "label": "6",
              "value": "6"
            },
            {
              "label": "7",
              "value": "7"
            },
            {
              "label": "8",
              "value": "8"
            },
            {
              "label": "9",
              "value": "9"
            },
            {
              "label": "bloq-zumjunior-display-none",
              "value": " "
            }
          ]
        }
      ]
    ],
    "code": "segmentDisplay.displayChar('{DIGIT1}','{DIGIT2}');",
    "arduino": {
      "code": "segmentDisplay.displayChar('{DIGIT1}','{DIGIT2}');"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorDisplayNumbers\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorDoubleLed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-doubleled",
    "content": [
      [
        {
          "id": "STATUS",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-doubleled-turnoff",
              "value": "HIGH"
            },
            {
              "label": "bloq-zumjunior-doubleled-turnon",
              "value": "LOW"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-doubleled-led"
        },
        {
          "id": "LED",
          "alias": "dynamicDropdown",
          "options": "zumjuniorDoubleLeds"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-doubleled-white",
              "value": "WhitePin"
            },
            {
              "label": "bloq-zumjunior-doubleled-color",
              "value": "ColorPin"
            }
          ]
        }
      ]
    ],
    "code": "digitalWrite({LED}{COLOR},{STATUS});",
    "arduino": {
      "code": "digitalWrite({LED}{COLOR},{STATUS});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorDoubleLed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorMiniservo",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-miniservo",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-miniservo-move"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "zumjuniorMiniservos"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-miniservo-to"
        },
        {
          "id": "POSITION",
          "alias": "numberInput",
          "value": 90
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-miniservo-degrees"
        }
      ]
    ],
    "code": "{SERVO}.write({POSITION});",
    "arduino": {
      "code": "{SERVO}.write({POSITION});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorMiniservo\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorPlayBuzz",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "af6eb40d-14f1-41fc-bea9-8afa40ab9b53"
      }
    ],
    "bloqClass": "bloq-zumjunior-play-buzz",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-play-buzz"
        },
        {
          "id": "NOTE",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-note-do",
              "value": "BQ::ZUMJunior::DO"
            },
            {
              "label": "bloq-zumjunior-note-re",
              "value": "BQ::ZUMJunior::RE"
            },
            {
              "label": "bloq-zumjunior-note-mi",
              "value": "BQ::ZUMJunior::MI"
            },
            {
              "label": "bloq-zumjunior-note-fa",
              "value": "BQ::ZUMJunior::FA"
            },
            {
              "label": "bloq-zumjunior-note-sol",
              "value": "BQ::ZUMJunior::SOL"
            },
            {
              "label": "bloq-zumjunior-note-la",
              "value": "BQ::ZUMJunior::LA"
            },
            {
              "label": "bloq-zumjunior-note-si",
              "value": "BQ::ZUMJunior::SI"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-play-for"
        },
        {
          "bloqInputId": "TIME",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "af6eb40d-14f1-41fc-bea9-8afa40ab9b53"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-play-ms"
        }
      ]
    ],
    "code": "zumJunior.play({NOTE},{TIME});delay({TIME});",
    "arduino": {
      "code": "zumJunior.play({NOTE},{TIME});delay({TIME});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorPlayBuzz\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zumjuniorReadButton",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zumjunior-read-button",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-read-read"
        },
        {
          "id": "BUTTON",
          "alias": "dynamicDropdown",
          "options": "zumjuniorButtons"
        }
      ]
    ],
    "code": "digitalRead({BUTTON}Pin)",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "digitalRead({BUTTON}Pin)"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorReadButton\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zumjuniorReadColor",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zumjunior-read-color",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-read-readcomponent"
        },
        {
          "id": "COMPONENT",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-color-red",
              "value": "0"
            },
            {
              "label": "bloq-zumjunior-color-green",
              "value": "1"
            },
            {
              "label": "bloq-zumjunior-color-blue",
              "value": "2"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-of-color-sensor"
        }
      ]
    ],
    "code": "colorSensor.getComponent({COMPONENT})",
    "returnType": {
      "type": "simple",
      "value": "float"
    },
    "arduino": {
      "code": "colorSensor.getComponent({COMPONENT})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorReadColor\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zumjuniorReadSensors",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zumjunior-read-sensors",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-read-read"
        },
        {
          "id": "SENSOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-sensors-temperature",
              "value": "tempSensor.getTemp()"
            },
            {
              "label": "bloq-zumjunior-sensors-distance",
              "value": "ALPSSensor.getDistance()"
            },
            {
              "label": "bloq-zumjunior-sensors-brightness",
              "value": "ALPSSensor.getAL()"
            }
          ]
        }
      ]
    ],
    "code": "{SENSOR}",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "{SENSOR}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorReadSensors\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "output",
    "name": "zumjuniorReadSlider",
    "connectors": [
      {
        "type": "connector--output",
        "accept": "connector--input"
      }
    ],
    "bloqClass": "bloq-zumjunior-read-slider",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-read-read"
        },
        {
          "id": "SWITCH",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-slider-switch1",
              "value": "_1Pin"
            },
            {
              "label": "bloq-zumjunior-slider-switch2",
              "value": "_2Pin"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-read-from"
        },
        {
          "id": "SLIDER",
          "alias": "dynamicDropdown",
          "options": "zumjuniorSliders"
        }
      ]
    ],
    "code": "digitalRead({SLIDER}{SWITCH})",
    "returnType": {
      "type": "simple",
      "value": "bool"
    },
    "arduino": {
      "code": "digitalRead({SLIDER}{SWITCH})"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorReadSlider\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorSensorsIf",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "add7205e-3ebe-417c-a713-90ed1490dd67"
      }
    ],
    "bloqClass": "bloq-zumjunior-sensors-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-sensors-if"
        },
        {
          "id": "SENSOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-sensors-temperature",
              "value": "tempSensor.getTemp()"
            },
            {
              "label": "bloq-zumjunior-sensors-distance",
              "value": "ALPSSensor.getDistance()"
            },
            {
              "label": "bloq-zumjunior-sensors-brightness",
              "value": "ALPSSensor.getAL()"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-is"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "=",
              "value": "=="
            },
            {
              "label": "!=",
              "value": "!="
            },
            {
              "label": ">",
              "value": ">"
            },
            {
              "label": ">=",
              "value": ">="
            },
            {
              "label": "<",
              "value": "<"
            },
            {
              "label": "<=",
              "value": "<="
            }
          ]
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "add7205e-3ebe-417c-a713-90ed1490dd67"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-sensors-exec"
        }
      ]
    ],
    "suggestedBloqs": [
      "else",
      "elseif"
    ],
    "code": "if({SENSOR} {OPERATOR} {VALUE}){{STATEMENTS}}",
    "arduino": {
      "code": "if({SENSOR} {OPERATOR} {VALUE}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorSensorsIf\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorSensorsWhile",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "fb5aa599-97d7-495c-a958-5b500f352bdf"
      }
    ],
    "bloqClass": "bloq-zumjunior-sensors-while",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-sensors-while"
        },
        {
          "id": "SENSOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-sensors-temperature",
              "value": "tempSensor.getTemp()"
            },
            {
              "label": "bloq-zumjunior-sensors-distance",
              "value": "ALPSSensor.getDistance()"
            },
            {
              "label": "bloq-zumjunior-sensors-brightness",
              "value": "ALPSSensor.getAL()"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-is"
        },
        {
          "id": "OPERATOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "=",
              "value": "=="
            },
            {
              "label": "!=",
              "value": "!="
            },
            {
              "label": ">",
              "value": ">"
            },
            {
              "label": ">=",
              "value": ">="
            },
            {
              "label": "<",
              "value": "<"
            },
            {
              "label": "<=",
              "value": "<="
            }
          ]
        },
        {
          "bloqInputId": "VALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "fb5aa599-97d7-495c-a958-5b500f352bdf"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-sensors-exec"
        }
      ]
    ],
    "code": "while({SENSOR} {OPERATOR} {VALUE}){{STATEMENTS}}",
    "arduino": {
      "code": "while({SENSOR} {OPERATOR} {VALUE}){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorSensorsWhile\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorServoStart",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-servo-start",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-servo-start-turn"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "zumjuniorServos"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-servo-start-direction"
        },
        {
          "id": "DIRECTION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-servo-start-clockwise",
              "value": "180 + "
            },
            {
              "label": "bloq-zumjunior-servo-start-counterclockwise",
              "value": "180 - "
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-servo-speed"
        },
        {
          "id": "SPEED",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-servo-start-high-speed",
              "value": "30"
            },
            {
              "label": "bloq-zumjunior-servo-start-medium-speed",
              "value": "20"
            },
            {
              "label": "bloq-zumjunior-servo-start-low-speed",
              "value": "10"
            }
          ]
        }
      ]
    ],
    "code": "{SERVO}.write({DIRECTION} {SPEED});",
    "arduino": {
      "code": "{SERVO}.write({DIRECTION} {SPEED});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorServoStart\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorServoStop",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-servo-stop",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-servo-stop"
        },
        {
          "id": "SERVO",
          "alias": "dynamicDropdown",
          "options": "zumjuniorServos"
        }
      ]
    ],
    "code": "{SERVO}.write(90);",
    "arduino": {
      "code": "{SERVO}.write(90);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorServoStop\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorSliderIf",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-slider-if",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-if"
        },
        {
          "id": "SWITCH",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-slider-switch1",
              "value": "_1Pin"
            },
            {
              "label": "bloq-zumjunior-slider-switch2",
              "value": "_2Pin"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-of"
        },
        {
          "id": "SLIDER",
          "alias": "dynamicDropdown",
          "options": "zumjuniorSliders"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-isin"
        },
        {
          "id": "POSITION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-slider-position0",
              "value": "!digitalRead"
            },
            {
              "label": "bloq-zumjunior-slider-position1",
              "value": "digitalRead"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-exec"
        }
      ]
    ],
    "suggestedBloqs": [
      "else",
      "elseif"
    ],
    "code": "if({POSITION}({SLIDER}{SWITCH})){{STATEMENTS}}",
    "arduino": {
      "code": "if({POSITION}({SLIDER}{SWITCH})){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorSliderIf\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement-input",
    "name": "zumjuniorSliderWhile",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--root",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-slider-while",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-while"
        },
        {
          "id": "SWITCH",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-slider-switch1",
              "value": "_1Pin"
            },
            {
              "label": "bloq-zumjunior-slider-switch2",
              "value": "_2Pin"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-of"
        },
        {
          "id": "SLIDER",
          "alias": "dynamicDropdown",
          "options": "zumjuniorSliders"
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-isin"
        },
        {
          "id": "POSITION",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-slider-position0",
              "value": "!digitalRead"
            },
            {
              "label": "bloq-zumjunior-slider-position1",
              "value": "digitalRead"
            }
          ]
        },
        {
          "alias": "text",
          "value": "bloq-zumjunior-slider-exec"
        }
      ]
    ],
    "code": "while({POSITION}({SLIDER}{SWITCH})){{STATEMENTS}}",
    "arduino": {
      "code": "while({POSITION}({SLIDER}{SWITCH})){{STATEMENTS}}"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorSliderWhile\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorTurnOffLed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-turnoff-led",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-turnoff-led"
        }
      ]
    ],
    "code": "zumJunior.setRGBLEDColor(BQ::ZUMJunior::BLACK);",
    "arduino": {
      "code": "zumJunior.setRGBLEDColor(BQ::ZUMJunior::BLACK);"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorTurnOffLed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorTurnOnLed",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      }
    ],
    "bloqClass": "bloq-zumjunior-turnon-led",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-turnon-led"
        },
        {
          "id": "COLOR",
          "alias": "staticDropdown",
          "options": [
            {
              "label": "bloq-zumjunior-color-red",
              "value": "BQ::ZUMJunior::RED"
            },
            {
              "label": "bloq-zumjunior-color-green",
              "value": "BQ::ZUMJunior::GREEN"
            },
            {
              "label": "bloq-zumjunior-color-blue",
              "value": "BQ::ZUMJunior::BLUE"
            },
            {
              "label": "bloq-zumjunior-color-yellow",
              "value": "BQ::ZUMJunior::YELLOW"
            },
            {
              "label": "bloq-zumjunior-color-pink",
              "value": "BQ::ZUMJunior::PINK"
            },
            {
              "label": "bloq-zumjunior-color-white",
              "value": "BQ::ZUMJunior::WHITE"
            }
          ]
        }
      ]
    ],
    "code": "zumJunior.setRGBLEDColor({COLOR});",
    "arduino": {
      "code": "zumJunior.setRGBLEDColor({COLOR});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorTurnOnLed\" no preparado para generar código python"
        }
      ]
    }
  },
  {
    "type": "statement",
    "name": "zumjuniorTurnOnLedRGB",
    "connectors": [
      {
        "type": "connector--top",
        "accept": "connector--bottom"
      },
      {
        "type": "connector--bottom",
        "accept": "connector--top"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "f1f89668-0a82-4a90-911e-f029fef105f6"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "ab5eafc1-6586-4350-bf8a-8fcbeda2a1a3"
      },
      {
        "type": "connector--input",
        "accept": "connector--output",
        "acceptType": [
          "all"
        ],
        "suggestedBloqs": [
          "number",
          "selectVariable"
        ],
        "name": "78faae50-f50a-425f-a5df-bcf3f508b7dc"
      }
    ],
    "bloqClass": "bloq-zumjunior-turnon-led-rgb",
    "content": [
      [
        {
          "alias": "text",
          "value": "bloq-zumjunior-turnon-led-rgb"
        },
        {
          "bloqInputId": "RVALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "f1f89668-0a82-4a90-911e-f029fef105f6"
        },
        {
          "bloqInputId": "GVALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "ab5eafc1-6586-4350-bf8a-8fcbeda2a1a3"
        },
        {
          "bloqInputId": "BVALUE",
          "alias": "bloqInput",
          "acceptType": [
            "all"
          ],
          "suggestedBloqs": [
            "number",
            "selectVariable"
          ],
          "name": "78faae50-f50a-425f-a5df-bcf3f508b7dc"
        }
      ]
    ],
    "code": "zumJunior.setRGBLED({RVALUE},{GVALUE},{BVALUE});",
    "arduino": {
      "code": "zumJunior.setRGBLED({RVALUE},{GVALUE},{BVALUE});"
    },
    "python": {
      "codeLines": [
        {
          "code": "Bloque \"zumjuniorTurnOnLedRGB\" no preparado para generar código python"
        }
      ]
    }
  }
]